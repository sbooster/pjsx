import Subscriber from "@/subscriber/Subscriber";
import Subscription from "@/subscription/Subscription";

/**
 * Интерфейс для издателя (Publisher), который управляет подписками на поток данных.
 * Этот интерфейс определяет метод для подписки на поток данных, который позволяет подписчикам
 * получать данные, ошибки и завершение потока.
 */
export default interface Publisher<T> {
    /**
     * Метод для подписки на поток данных.
     * Позволяет подписчику начать получать данные, ошибки и завершение потока.
     * Этот метод может принимать как коллбек, который будет вызываться с полученными данными,
     * так и более сложный объект подписчика, реализующий интерфейс `Subscriber`.
     *
     * @param subscriber - Подписчик, который будет получать данные из потока.
     *  - Может быть функцией, которая принимает данные (`(data: T) => void`).
     *  - Может быть объектом, реализующим интерфейс `Subscriber`, который предоставляет методы
     *    для обработки данных (`onNext`), ошибок (`onError`) и завершения потока (`onComplete`).
     *
     * @returns Возвращает объект подписки, который можно использовать для управления подпиской
     * и отмены получения данных.
     *
     * Пример использования:
     *   publisher.subscribe((data: string) => console.log('Полученные данные:', data)); // Подписка с использованием коллбека
     *   publisher.subscribe(new MySubscriber()); // Подписка с использованием объекта Subscriber
     */
    subscribe(subscriber: ((data: T) => void) | Subscriber<T>): void | Subscription | any;
}