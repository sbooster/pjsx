/**
 * Интерфейс для подписчика, который обрабатывает данные, ошибки и завершение потока данных.
 * Этот интерфейс используется в реактивных системах для обработки событий, таких как получение данных,
 * обработка ошибок и завершение работы потока данных.
 */
export default interface Subscriber<T> {
    /**
     * Метод, вызываемый при получении нового элемента данных.
     * Этот метод позволяет подписчику обрабатывать данные, когда они поступают в поток.
     *
     * @param data - Данные, которые были получены из потока.
     *
     * Пример использования:
     *   subscriber.onNext('Hello world'); // Обрабатываем полученные данные
     */
    onNext(data: T): void;

    /**
     * Метод, вызываемый при возникновении ошибки в потоке данных.
     * Этот метод позволяет подписчику обработать ошибку, которая произошла в процессе получения данных.
     * Ошибка может быть связана с проблемами сети, некорректными данными или другими исключениями.
     *
     * @param error - Объект ошибки, описывающий причину сбоя.
     *
     * Пример использования:
     *   subscriber.onError(new Error('Network failure')); // Обрабатываем ошибку
     */
    onError(error: Error): void;

    /**
     * Метод, вызываемый, когда поток данных завершён (например, все данные были получены или завершён процесс).
     * Этот метод сигнализирует подписчику о завершении работы потока данных.
     * После вызова этого метода подписка больше не будет получать данные или ошибки.
     *
     * Пример использования:
     *   subscriber.onComplete(); // Обрабатываем завершение потока
     */
    onComplete(): void;
}