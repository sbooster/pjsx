{"version":3,"sources":["../src/sinks/backpressure/index.ts","../src/sinks/many/index.ts","../src/sinks/many/replay/index.ts","../src/sinks/many/replay/all/index.ts","../src/sinks/many/replay/limit/index.ts","../src/sinks/many/replay/latest/index.ts","../src/sinks/one/index.ts","../src/schedulers/immediate/index.ts","../src/schedulers/micro/index.ts","../src/schedulers/macro/index.ts","../src/schedulers/delay/index.ts","../src/publishers/index.ts","../src/publishers/pipe/index.ts","../src/serializers/json/index.ts","../src/serializers/sia/types/index.ts","../src/serializers/sia/writer/Uint8ArrayWriter.ts","../src/serializers/sia/utfz/index.ts","../src/serializers/sia/writer/TypeWriter.ts","../src/serializers/sia/index.ts","../src/utils/index.ts","../src/utils/peek/index.ts","../src/publishers/flux/index.ts","../src/publishers/mono/index.ts","../src/serializers/base64/index.ts","../src/serializers/stringify/index.ts","../src/serializers/rc4/index.ts","../src/cache/index.ts","../src/eventbus/priority/index.ts","../src/eventbus/index.ts","../src/eventbus/event/index.ts","../src/utils/reactive/index.ts","../src/index.ts"],"sourcesContent":["/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nimport {Subscriber, Subscription} from \"@/subscriptions\";\nimport {Publisher} from \"@/publishers\";\nimport {Sink} from \"@/sinks\";\n\ntype Backpressure<T> = {\n    subscriber: Subscriber<T>\n    data: EmitAction<T>[]\n    requested: number;\n}\n\nexport type EmitAction<T> = {\n    emit: 'next' | 'error' | 'complete'\n    data?: T | Error\n}\n\nexport abstract class BackpressureSink<T> implements Sink<T>, Publisher<T> {\n    protected readonly subscribers = new Set<Backpressure<T>>()\n    protected completed = false\n\n    protected emit(action: EmitAction<T>, subscriber: Subscriber<T>) {\n        switch (action.emit) {\n            case \"next\": {\n                try {\n                    subscriber.onNext(action.data as T)\n                } catch (error) {\n                    subscriber.onError(error as Error)\n                }\n                break;\n            }\n            case \"error\": {\n                subscriber.onError(action.data as Error)\n                break;\n            }\n            case \"complete\": {\n                subscriber.onComplete()\n            }\n        }\n    }\n\n    private flush(backpressure: Backpressure<T>) {\n        const data = backpressure.data;\n        while (backpressure.requested > 0 && data.length > 0) {\n            backpressure.requested--\n            this.emit(data.shift() as EmitAction<T>, backpressure.subscriber)\n        }\n        if (data.length > 0 && data[0].emit == \"complete\") {\n            backpressure.requested++\n            this.flush(backpressure)\n        }\n    }\n\n    public subscribe(subscriber: Subscriber<T>): Subscription {\n        // if (this.completed) throw new Error('The completed sink is not accepting new subscribers.')\n\n        const backpressure: Backpressure<T> = {\n            subscriber: subscriber,\n            data: [],\n            requested: 0,\n        }\n\n        this.subscribers.add(backpressure)\n\n        return {\n            request: (count: number) => {\n                backpressure.requested += count\n                this.flush(backpressure)\n            },\n            unsubscribe: () => {\n                backpressure.data = []\n                this.subscribers.delete(backpressure)\n            }\n        }\n    }\n\n    protected validateEmit() {\n        if (this.completed) throw new Error('The completed sink is not accepting new emits.')\n    }\n\n    public next(value: T): void {\n        this.validateEmit()\n        for (const subscriber of this.subscribers) {\n            subscriber.data.push({emit: 'next', data: value})\n            this.flush(subscriber)\n        }\n    }\n\n    public error(error: Error): void {\n        this.validateEmit()\n        // if(this.completed) return\n        for (const subscriber of this.subscribers) {\n            subscriber.data.push({emit: 'error', data: error})\n            this.flush(subscriber)\n        }\n    }\n\n    public complete(): void {\n        if (this.completed) return\n        this.completed = true;\n        for (const subscriber of this.subscribers) {\n            subscriber.data.push({emit: 'complete'})\n            this.flush(subscriber)\n        }\n        this.subscribers.clear()\n    }\n}","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nimport {BackpressureSink} from \"@/sinks/backpressure\";\n\nexport default class ManySink<T> extends BackpressureSink<T> {\n}","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\nimport {Subscriber, Subscription} from \"@/subscriptions\";\nimport ManySink from \"@/sinks/many\";\nimport {BackpressureSink, EmitAction} from \"@/sinks/backpressure\";\n\nexport abstract class ReplaySink<T> extends ManySink<T> implements BackpressureSink<T> {\n    readonly buffer: EmitAction<T>[] = []\n\n    protected replay(subscriber: Subscriber<T>) {\n        for (const action of this.buffer) {\n            this.emit(action, subscriber)\n        }\n    }\n\n    protected store(emit: 'next' | 'error' | 'complete', data?: T | Error) {\n        this.buffer.push({emit, data})\n    }\n\n    public override next(value: T): void {\n        super.next(value)\n        this.store('next', value)\n    }\n\n    public override error(error: Error) {\n        super.error(error);\n        this.store('error', error)\n    }\n\n    public override complete() {\n        super.complete();\n        this.store(\"complete\")\n    }\n\n    public override subscribe(subscriber: Subscriber<T>): Subscription {\n        const subscription = super.subscribe(subscriber)\n        this.replay(subscriber)\n        return subscription\n    }\n}","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nimport {ReplaySink} from \"@/sinks/many/replay\";\n\nexport class ReplayAllSink<T> extends ReplaySink<T> {\n}\n","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\nimport {ReplaySink} from \"@/sinks/many/replay\";\n\nexport class ReplayLimitSink<T> extends ReplaySink<T> {\n    public constructor(private readonly limit: number) {\n        super()\n        if (limit < 1) throw new Error(\"LimitSink: limit must be > 0\")\n    }\n\n    protected override store(emit: \"next\" | \"error\" | \"complete\", data?: Error | T) {\n        if (this.buffer.length <= this.limit) super.store(emit, data)\n    }\n}","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nimport {ReplaySink} from \"@/sinks/many/replay\";\n\nexport class ReplayLatestSink<T> extends ReplaySink<T> {\n    public constructor(private readonly limit: number) {\n        super()\n        if (limit < 1) throw new Error(\"LatestSink: limit must be > 0\")\n    }\n\n    protected override store(emit: \"next\" | \"error\" | \"complete\", data?: Error | T) {\n        super.store(emit, data)\n        if (this.buffer.length > this.limit) this.buffer.shift()\n    }\n}","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nimport {Subscriber, Subscription} from \"@/subscriptions\";\nimport {BackpressureSink} from \"@/sinks/backpressure\";\n\nexport default class OneSink<T> extends BackpressureSink<T> {\n    public override subscribe(subscriber: Subscriber<T>): Subscription {\n        if (this.subscribers.size > 0) {\n            throw new Error(\"Only one subscriber is allowed for OneSink.\")\n        }\n        return super.subscribe(subscriber)\n    }\n\n    public override next(value: T): void {\n        super.next(value)\n        this.complete()\n    }\n\n    public error(error: Error): void {\n        super.error(error)\n        this.complete()\n    }\n}\n","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\nimport { Scheduler } from '@/schedulers'\n\n/**\n * Немедленно исполняющий планировщик (синхронно).\n */\nexport class ImmediateScheduler implements Scheduler {\n    public schedule(task: () => void): void {\n        task()\n    }\n}\n","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nimport {Scheduler} from \"@/schedulers\";\n\n/**\n * Планировщик, использующий очередь microtasks (Promise).\n */\nexport class MicroScheduler implements Scheduler {\n    public schedule(task: () => void): void {\n        Promise.resolve().then(task)\n    }\n}\n","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nimport {Scheduler} from \"@/schedulers\";\n\n/**\n * Планировщик, использующий macro tasks (через setTimeout).\n */\nexport class MacroScheduler implements Scheduler {\n    public schedule(task: () => void): void {\n        setTimeout(task, 0)\n    }\n}\n","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nimport {CancellableScheduler} from \"@/schedulers\";\n\n/**\n * Планировщик с задержкой выполнения задачи и возможностью отмены.\n */\nexport class DelayScheduler implements CancellableScheduler {\n    private readonly delay: number\n\n    constructor(delay: number) {\n        this.delay = delay\n    }\n\n    public schedule(task: () => void): { cancel: () => void } {\n        const id = setTimeout(task, this.delay)\n        return {\n            cancel: () => clearTimeout(id)\n        }\n    }\n}\n","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nimport {Subscriber, Subscription} from \"@/subscriptions\";\nimport {EmitAction} from \"@/sinks/backpressure\";\n\n/**\n * Источник данных — может быть подписан подписчиком.\n */\nexport interface Publisher<T> {\n    subscribe(subscriber: Subscriber<T>): Subscription\n}\n\nexport class BackpressurePublisher<T> implements Publisher<T> {\n    private backpressure: Array<EmitAction<T>> = []\n    private subscriber?: Subscriber<T>\n    private requested: number = 0;\n    private subscription: Subscription\n\n    public constructor(sink: Publisher<T>) {\n        this.subscription = sink.subscribe({\n            onNext: (value: T) => {\n                this.backpressure.push({emit: 'next', data: value})\n                this.flush()\n            },\n            onError: (error: Error) => {\n                this.backpressure.push({emit: 'error', data: error})\n                this.flush()\n            },\n            onComplete: () => {\n                this.subscription.unsubscribe()\n                this.backpressure.push({emit: 'complete'})\n                this.flush()\n            }\n        })\n        this.subscription.request(Number.MAX_SAFE_INTEGER)\n    }\n\n    private emit(action: EmitAction<T>) {\n        switch (action.emit) {\n            case \"next\": {\n                try {\n                    this.subscriber?.onNext(action.data as T)\n                } catch (error) {\n                    this.subscriber?.onError(error as Error)\n                }\n                break;\n            }\n            case \"error\": {\n                this.subscriber?.onError(action.data as Error)\n                break;\n            }\n            case \"complete\": {\n                this.subscriber?.onComplete()\n            }\n        }\n    }\n\n    private flush() {\n        while (this.requested > 0 && this.backpressure.length > 0) {\n            this.requested--\n            this.emit(this.backpressure.shift() as EmitAction<T>)\n        }\n        if (this.subscriber != null && this.backpressure[0]?.emit == 'complete') {\n            this.emit(this.backpressure.shift() as EmitAction<T>)\n        }\n    }\n\n    public subscribe(subscriber: Subscriber<T>): Subscription {\n        if (this.subscriber != null) throw new Error(\"Backpressure unicast publisher is not accepting new subscribers\")\n        this.subscriber = subscriber;\n        return {\n            request: (count: number) => {\n                this.requested += count\n                this.flush()\n            },\n            unsubscribe: () => {\n                this.backpressure = []\n                this.subscription.unsubscribe()\n            }\n        };\n    }\n\n}","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\nimport {BackpressurePublisher, Publisher} from \"@/publishers\";\nimport {Subscriber, Subscription} from \"@/subscriptions\";\nimport {Scheduler} from \"@/schedulers\";\nimport OneSink from \"@/sinks/one\";\nimport ManySink from \"@/sinks/many\";\n\n/**\n * Publisher с возможностью построения реактивных цепочек операторов.\n */\nexport interface PipePublisher<T> extends Publisher<T> {\n    /**\n     * Объединяет несколько операторов в цепочку.\n     */\n    pipe<R>(producer: (onNext: (value: R) => void, onError: (error: Error) => void, onComplete: () => void) => void, onSubscribe: (subscriber: Subscriber<R>) => void, onRequest: (request: number) => void, onUnsubscribe: () => void): PipePublisher<R>\n\n    /**\n     * Преобразует входящее значение.\n     */\n    map<R>(fn: (value: T) => R): PipePublisher<R>\n\n    /**\n     * Преобразует значение, отбрасывает null/undefined.\n     */\n    mapNotNull<R>(fn: (value: T) => R | null | undefined): PipePublisher<R>\n\n    /**\n     * Раскрывает новый Publisher для каждого значения.\n     */\n    flatMap<R>(fn: (value: T) => Publisher<R>): PipePublisher<R>\n\n    /**\n     * Пропускает значения, не прошедшие фильтр.\n     */\n    filter(predicate: (value: T) => boolean): PipePublisher<T>\n\n    /**\n     * Асинхронный фильтр.\n     */\n    filterWhen(predicate: (value: T) => Publisher<boolean>): PipePublisher<T>\n\n    /**\n     * Приведение типа.\n     */\n    cast<R>(): PipePublisher<R>\n\n    /**\n     * Использует альтернативный Publisher, если исходный пуст.\n     */\n    switchIfEmpty(alternative: Publisher<T>): PipePublisher<T>\n\n    /**\n     * Возвращает значение по умолчанию при ошибке.\n     */\n    onErrorReturn(replacement: Publisher<T>): PipePublisher<T>\n\n    /**\n     * Игнорирует ошибку и вызывает обработчик.\n     */\n    onErrorContinue(predicate: (error: Error) => boolean): PipePublisher<T>\n\n    /**\n     * Выполняет побочный эффект сразу при создании цепочки.\n     */\n    doFirst(fn: () => void): PipePublisher<T>\n\n    /**\n     * Выполняет побочный эффект при каждом onNext.\n     */\n    doOnNext(fn: (value: T) => void): PipePublisher<T>\n\n    /**\n     * Выполняет побочный эффект при завершении или ошибке.\n     */\n    doFinally(fn: () => void): PipePublisher<T>\n\n    /**\n     * Вызывается при подписке, позволяет манипулировать request().\n     */\n    doOnSubscribe(fn: (subscriber: Subscriber<T>) => void): PipePublisher<T>\n\n    /**\n     * Переносит выполнение onNext/onError/onComplete в указанный Scheduler.\n     */\n    publishOn(scheduler: Scheduler): PipePublisher<T>\n\n    /**\n     * Осуществляет подписку в указанном Scheduler.\n     */\n    subscribeOn(scheduler: Scheduler): PipePublisher<T>\n}\n\nexport abstract class AbstractPipePublisher<T> implements PipePublisher<T> {\n    abstract subscribe(subscriber: Subscriber<T>): Subscription\n\n    abstract sinkType(): 'one' | 'many'\n\n    protected constructor(protected readonly publisher: Publisher<T>) {\n    }\n\n    private wrap<R>(publisher: Publisher<R>) {\n        return Reflect.construct((Reflect.getPrototypeOf(this) as PipePublisher<any>).constructor, [publisher])\n    }\n\n    public pipe<R>(producer: (onNext: (value: R) => void, onError: (error: Error) => void, onComplete: () => void) => void, onSubscribe?: (subscriber: Subscriber<R>) => void, onRequest?: (request: number) => void, onUnsubscribe?: () => void): PipePublisher<R> {\n        const many = this.sinkType() == 'many';\n        const sink = !many ? new OneSink<R>() : new ManySink<R>();\n        const unicast = new class A extends BackpressurePublisher<R> {\n            public override subscribe(subscriber: Subscriber<R>): Subscription {\n                onSubscribe?.(subscriber)\n                const sub = super.subscribe(subscriber)\n                return {\n                    request(count: number) {\n                        sub.request(count)\n                        onRequest?.(count)\n                    },\n                    unsubscribe() {\n                        sub.unsubscribe()\n                        onUnsubscribe?.()\n                    }\n                };\n            }\n        }(sink);\n        try {\n            producer(value => {\n                    if (many && value == null) onRequest?.(1)\n                    else sink.next(value)\n                },\n                error => {\n                    sink.error(error)\n                    onRequest?.(1)\n                },\n                () => sink.complete())\n        } catch (error) {\n            sink.error(error as Error)\n        }\n        return this.wrap(unicast)\n    }\n\n    public map<R>(fn: (value: T) => R): PipePublisher<R> {\n        let sub: Subscription;\n        return this.pipe((onNext, onError, onComplete) =>\n            sub = this.subscribe({\n                onNext: value => onNext(fn(value)),\n                onError,\n                onComplete\n            }), undefined, request => sub?.request(request), () => sub?.unsubscribe())\n    }\n\n    public mapNotNull<R>(fn: (value: T) => R | null | undefined): PipePublisher<R> {\n        return this.map(fn).filter((v): v is R => v != null) as PipePublisher<R>\n    }\n\n    public flatMap<R>(fn: (value: T) => Publisher<R>): PipePublisher<R> {\n        let sub: Subscription;\n        let req = 0\n        return this.pipe((onNext, onError, onComplete) =>\n                sub = this.subscribe({\n                    onNext: (value) => {\n                        fn(value).subscribe({\n                            onNext, onError, onComplete: () => (this.sinkType() == 'many') ? () => {\n                            } : onComplete\n                        }).request(req)\n                    }, onError, onComplete\n                })\n            , undefined, request => sub?.request(req = request), () => sub?.unsubscribe())\n    }\n\n    public filter(predicate: (value: T) => boolean): PipePublisher<T> {\n        let sub: Subscription\n        return this.pipe((onNext, onError, onComplete) =>\n            sub = this.subscribe({\n                onNext: (value) => predicate(value) ? onNext(value) : (this.sinkType() == 'many') ? onNext(null as T) : onComplete(),\n                onError,\n                onComplete\n            }), undefined, request => sub?.request(request), () => sub?.unsubscribe())\n    }\n\n    public filterWhen(predicate: (value: T) => Publisher<boolean>): PipePublisher<T> {\n        let sub: Subscription\n        let req = 0\n        return this.pipe((onNext, onError, onComplete) =>\n            sub = this.subscribe({\n                onNext: (value) => predicate(value).subscribe({\n                    onNext: bool => bool ? onNext(value) : (this.sinkType() == 'many') ? onNext(null as T) : onComplete(),\n                    onError,\n                    onComplete: () => (this.sinkType() == 'many') ? () => {\n                    } : onComplete\n                }).request(req), onError, onComplete\n            }), undefined, request => sub?.request(req = request), () => sub?.unsubscribe())\n    }\n\n    public cast<R>(): PipePublisher<R> {\n        return this as unknown as PipePublisher<R>\n    }\n\n    public switchIfEmpty(alternative: Publisher<T>): PipePublisher<T> {\n        let sub: Subscription\n        let req = 0\n        return this.pipe((onNext, onError, onComplete) => {\n            let emitted = false;\n            sub = this.subscribe({\n                onNext(value: T) {\n                    emitted = true\n                    onNext(value)\n                },\n                onError(error: Error) {\n                    emitted = true\n                    onError(error)\n                },\n                onComplete: () => {\n                    return emitted ? onComplete() : alternative.subscribe({onNext, onError, onComplete}).request(req)\n                }\n            })\n        }, undefined, request => sub?.request(req = request), () => sub?.unsubscribe())\n    }\n\n    public onErrorReturn(replacement: Publisher<T>): PipePublisher<T> {\n        let sub: Subscription\n        let req = 0\n        return this.pipe((onNext, onError, onComplete) =>\n            sub = this.subscribe({\n                onNext,\n                onError: () => replacement.subscribe({onNext, onError, onComplete}).request(req),\n                onComplete\n            }), undefined, request => sub?.request(req = request), () => sub?.unsubscribe())\n    }\n\n    public onErrorContinue(predicate: (error: Error) => boolean): PipePublisher<T> {\n        let sub: Subscription\n        return this.pipe((onNext, onError, onComplete) =>\n            sub = this.subscribe({\n                onNext, onError: error => predicate(error) ? (this.sinkType() == 'many') ? onNext(null as T) : onComplete() : onError(error), onComplete\n            }), undefined, request => sub?.request(request), () => sub?.unsubscribe())\n    }\n\n    public doFirst(fn: () => void): PipePublisher<T> {\n        let sub: Subscription\n        return this.pipe((onNext, onError, onComplete) => {\n                fn()\n                sub = this.subscribe({onNext, onError, onComplete})\n            }, undefined, request => sub?.request(request), () => sub?.unsubscribe()\n        )\n    }\n\n    public doOnNext(fn: (value: T) => void): PipePublisher<T> {\n        let sub: Subscription\n        return this.pipe((onNext, onError, onComplete) =>\n            sub = this.subscribe({\n                onNext: value => {\n                    fn(value)\n                    onNext(value)\n                }, onError, onComplete\n            }), undefined, request => sub?.request(request), () => sub?.unsubscribe())\n    }\n\n    public doFinally(fn: () => void): PipePublisher<T> {\n        let sub: Subscription\n        return this.pipe((onNext, onError, onComplete) =>\n            sub = this.subscribe({\n                onNext, onError, onComplete: () => {\n                    try {\n                        onComplete()\n                    } finally {\n                        fn()\n                    }\n                }\n            }), undefined, request => sub?.request(request), () => sub?.unsubscribe())\n    }\n\n    public doOnSubscribe(fn: (subscriber: Subscriber<T>) => void): PipePublisher<T> {\n        // todo срабатывает без subscribe\n        let sub: Subscription\n        return this.pipe((onNext, onError, onComplete) =>\n            sub = this.subscribe({\n                onNext,\n                onError,\n                onComplete\n            }), subscriber => fn(subscriber), request => sub?.request(request), () => sub?.unsubscribe())\n    }\n\n    public publishOn(scheduler: Scheduler): PipePublisher<T> {\n        let sub: Subscription\n        return this.pipe((onNext, onError, onComplete) =>\n            sub = this.subscribe({\n                onNext: value => scheduler.schedule(() => onNext(value)),\n                onError: error => scheduler.schedule(() => onError(error)),\n                onComplete: () => scheduler.schedule(() => onComplete())\n            }), undefined, request => sub?.request(request), () => sub?.unsubscribe())\n    }\n\n    public subscribeOn(scheduler: Scheduler): PipePublisher<T> {\n        let sub: Promise<Subscription>\n        return this.pipe((onNext, onError, onComplete) =>\n                sub = new Promise(resolve => scheduler.schedule(() => resolve(this.subscribe({\n                    onNext,\n                    onError,\n                    onComplete\n                })))),\n            undefined, request => sub?.then(value => value.request(request)), () => sub?.then(value => value.unsubscribe())\n        )\n    }\n}\n","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nimport {Serializer} from \"@/serializers\";\n\nexport default {\n    serialize(obj: any): string {\n        return JSON.stringify(obj, (_key, value) => {\n            if(value == null) return value\n            switch (Object.getPrototypeOf(value)?.constructor) {\n                case Map: return {\n                    \"__type__\": \"Map\",\n                    \"value\": Array.from(value.entries())\n                }\n                case Set: return {\n                    \"__type__\": \"Set\",\n                    \"value\": Array.from(value)\n                }\n                default: return value\n            }\n        })\n    },\n    deserialize<C>(obj: string): C {\n        return JSON.parse(obj, (_key, value) => {\n            switch (value?.__type__) {\n                case \"Map\": return new Map(value.value)\n                case \"Set\": return new Set(value.value)\n                default: return value\n            }\n        })\n    },\n} as Serializer<any, string>","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nexport default Object.fromEntries([\"null\", \"undefined\", \"uint8\", \"uint16\", \"uint32\", \"uint64\", \"uint128\", \"uintn\",\n    \"int8\", \"int16\", \"int32\", \"int64\", \"int128\", \"intn\", \"float8\", \"float16\", \"float32\", \"float64\", \"float128\",\n    \"floatn\", \"record\", \"ref8\", \"ref16\", \"ref32\", \"ref64\", \"ref128\", \"refn\", \"utfz\", \"string8\", \"string16\", \"string32\",\n    \"string64\", \"string128\", \"stringn\", \"bin8\", \"bin16\", \"bin32\", \"bin64\", \"bin128\", \"binN\", \"true\", \"false\", \"date\",\n    \"date64\", \"constructor8\", \"constructor16\", \"constructor32\", \"array8\", \"array16\", \"array32\", \"array64\", \"array128\",\n    \"objectStart\", \"objectEnd\", \"setStart\", \"setEnd\", \"mapStart\", \"mapEnd\", \"onull\", \"onumber\", \"ostring\", \"otrue\",\n    \"ofalse\", \"regexp\", \"date\", \"int8array8\", \"int8array16\", \"int8array32\", \"uint8array8\", \"uint8array16\",\n    \"uint8array32\", \"uint8clampedarray8\", \"uint8clampedarray16\", \"uint8clampedarray32\", \"int16array8\", \"int16array16\",\n    \"int16array32\", \"uint16array8\", \"uint16array16\", \"uint16array32\", \"int32array8\", \"int32array16\", \"int32array32\",\n    \"uint32array8\", \"uint32array16\", \"uint32array32\", \"float32array8\", \"float32array16\", \"float32array32\",\n    \"float64array8\", \"float64array16\", \"float64array32\", \"bigint64array8\", \"bigint64array16\", \"bigint64array32\",\n    \"biguint64array8\", \"biguint64array16\", \"biguint64array32\", \"bigint8\", \"bigint16\", \"bigint32\", \"bigint64\", \"bigintN\",\n    \"biguint8\", \"biguint16\", \"biguint32\", \"biguint64\", \"biguintN\", \"oref8\", \"oref16\", \"oref32\"]\n    .map((r, a) => [r, a]));","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nexport default abstract class Uint8ArrayWriter {\n    protected abstract buffer: Uint8Array<ArrayBuffer>\n    protected abstract offset: number\n    protected readonly textEncoder = new TextEncoder()\n\n    public writeString(str: string, offset: number) {\n        const worstCaseLength = str.length * 3;\n        const requiredLength = offset + worstCaseLength;\n        if (requiredLength > this.buffer.length) {\n            const newBufferSize = Math.pow(2, Math.ceil(Math.log2(requiredLength)));\n            const newBuffer = new Uint8Array(newBufferSize);\n            newBuffer.set(this.buffer);\n            this.buffer = newBuffer;\n        }\n        const view = this.buffer.subarray(offset);\n        const {written} = this.textEncoder.encodeInto(str, view);\n        return written;\n    }\n\n    public writeUInt8(number: number) {\n        const offset = this.offset;\n        const end = offset + 1;\n        if (end <= this.buffer.length) {\n            this.buffer[offset] = number;\n            this.offset += 1;\n            return this.offset;\n        } else {\n            const bufferSizeNeeded = Math.ceil(Math.log2(end));\n            const newBufferSize = Math.pow(2, bufferSizeNeeded);\n            const newBuffer = new Uint8Array(newBufferSize);\n            newBuffer.set(this.buffer);\n            this.buffer = newBuffer;\n            this.buffer[offset] = number;\n            this.offset += 1;\n            return this.offset;\n        }\n    }\n\n    public writeUInt16(number: number) {\n        const end = this.offset + 2;\n        if (end <= this.buffer.length) {\n            new DataView(this.buffer.buffer).setUint16(this.offset, number, true);\n            this.offset += 2;\n            return this.offset;\n        } else {\n            const bufferSizeNeeded = Math.ceil(Math.log2(end));\n            const newBufferSize = Math.pow(2, bufferSizeNeeded);\n            const newBuffer = new Uint8Array(newBufferSize);\n            newBuffer.set(this.buffer);\n            this.buffer = newBuffer;\n            new DataView(this.buffer.buffer).setUint16(this.offset, number, true);\n            this.offset += 2;\n            return this.offset;\n        }\n    }\n\n    public writeUInt32(number: number) {\n        const end = this.offset + 4;\n        if (end <= this.buffer.length) {\n            new DataView(this.buffer.buffer).setUint32(this.offset, number, true);\n            this.offset += 4;\n            return this.offset;\n        } else {\n            const bufferSizeNeeded = Math.ceil(Math.log2(end));\n            const newBufferSize = Math.pow(2, bufferSizeNeeded);\n            const newBuffer = new Uint8Array(newBufferSize);\n            newBuffer.set(this.buffer);\n            this.buffer = newBuffer;\n            new DataView(this.buffer.buffer).setUint32(this.offset, number, true);\n            this.offset += 4;\n            return this.offset;\n        }\n    }\n\n    public writeBigUInt64(number: bigint) {\n        const end = this.offset + 8;\n        if (end <= this.buffer.length) {\n            new DataView(this.buffer.buffer).setBigUint64(this.offset, number, true);\n            this.offset += 8;\n            return this.offset;\n        } else {\n            const bufferSizeNeeded = Math.ceil(Math.log2(end));\n            const newBufferSize = Math.pow(2, bufferSizeNeeded);\n            const newBuffer = new Uint8Array(newBufferSize);\n            newBuffer.set(this.buffer);\n            this.buffer = newBuffer;\n            new DataView(this.buffer.buffer).setBigUint64(this.offset, number, true);\n            this.offset += 8;\n            return this.offset;\n        }\n    }\n\n    public writeBigUInt64AtOffset(number: bigint, offset: number) {\n        const end = offset + 8;\n        if (end <= this.buffer.length) {\n            new DataView(this.buffer.buffer).setBigUint64(offset, number, true);\n            return offset + 8;\n        } else {\n            const bufferSizeNeeded = Math.ceil(Math.log2(end));\n            const newBufferSize = Math.pow(2, bufferSizeNeeded);\n            const newBuffer = new Uint8Array(newBufferSize);\n            newBuffer.set(this.buffer);\n            this.buffer = newBuffer;\n            new DataView(this.buffer.buffer).setBigUint64(offset, number, true);\n            return offset + 8;\n        }\n    }\n\n    public writeInt8(number: number) {\n        const end = this.offset + 1;\n        if (end <= this.buffer.length) {\n            new DataView(this.buffer.buffer).setInt8(this.offset, number);\n            this.offset += 1;\n            return this.offset;\n        } else {\n            const bufferSizeNeeded = Math.ceil(Math.log2(end));\n            const newBufferSize = Math.pow(2, bufferSizeNeeded);\n            const newBuffer = new Uint8Array(newBufferSize);\n            newBuffer.set(this.buffer);\n            this.buffer = newBuffer;\n            new DataView(this.buffer.buffer).setInt8(this.offset, number);\n            this.offset += 1;\n            return this.offset;\n        }\n    }\n\n    public writeInt16(number: number) {\n        const end = this.offset + 2;\n        if (end <= this.buffer.length) {\n            new DataView(this.buffer.buffer).setInt16(this.offset, number, true);\n            this.offset += 2;\n            return this.offset;\n        } else {\n            const bufferSizeNeeded = Math.ceil(Math.log2(end));\n            const newBufferSize = Math.pow(2, bufferSizeNeeded);\n            const newBuffer = new Uint8Array(newBufferSize);\n            newBuffer.set(this.buffer);\n            this.buffer = newBuffer;\n            new DataView(this.buffer.buffer).setInt16(this.offset, number, true);\n            this.offset += 2;\n            return this.offset;\n        }\n    }\n\n    public writeInt32(number: number) {\n        const end = this.offset + 4;\n        if (end <= this.buffer.length) {\n            new DataView(this.buffer.buffer).setInt32(this.offset, number, true);\n            this.offset += 4;\n            return this.offset;\n        } else {\n            const bufferSizeNeeded = Math.ceil(Math.log2(end));\n            const newBufferSize = Math.pow(2, bufferSizeNeeded);\n            const newBuffer = new Uint8Array(newBufferSize);\n            newBuffer.set(this.buffer);\n            this.buffer = newBuffer;\n            new DataView(this.buffer.buffer).setInt32(this.offset, number, true);\n            this.offset += 4;\n            return this.offset;\n        }\n    }\n\n    public writeBigInt64(number: bigint) {\n        const end = this.offset + 8;\n        if (end <= this.buffer.length) {\n            new DataView(this.buffer.buffer).setBigInt64(this.offset, number, true);\n            this.offset += 8;\n            return this.offset;\n        } else {\n            const bufferSizeNeeded = Math.ceil(Math.log2(end));\n            const newBufferSize = Math.pow(2, bufferSizeNeeded);\n            const newBuffer = new Uint8Array(newBufferSize);\n            newBuffer.set(this.buffer);\n            this.buffer = newBuffer;\n            new DataView(this.buffer.buffer).setBigInt64(this.offset, number, true);\n            this.offset += 8;\n            return this.offset;\n        }\n    }\n\n    public writeDouble(number: number) {\n        const end = this.offset + 8;\n        if (end <= this.buffer.length) {\n            new DataView(this.buffer.buffer).setFloat64(this.offset, number, true);\n            this.offset += 8;\n            return this.offset;\n        } else {\n            const bufferSizeNeeded = Math.ceil(Math.log2(end));\n            const newBufferSize = Math.pow(2, bufferSizeNeeded);\n            const newBuffer = new Uint8Array(newBufferSize);\n            newBuffer.set(this.buffer);\n            this.buffer = newBuffer;\n            new DataView(this.buffer.buffer).setFloat64(this.offset, number, true);\n            this.offset += 8;\n            return this.offset;\n        }\n    }\n}","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nconst fromCharCode = String.fromCharCode;\n\nexport default {\n    pack: (str: string, length: number, buf: Uint8Array<ArrayBuffer>, offset: number) => {\n        const start = offset;\n        let currHigh = 0;\n        for (let i = 0; i < length; i++) {\n            const code = str.charCodeAt(i);\n            const high = code >> 8;\n            if (high !== currHigh) {\n                buf[i + offset++] = 0;\n                buf[i + offset++] = high;\n                currHigh = high;\n            }\n            const low = code & 0xff;\n            buf[i + offset] = low;\n            if (low === 0) {\n                buf[i + ++offset] = currHigh;\n            }\n        }\n        return length + offset - start;\n    },\n    unpack: (buf: Uint8Array<ArrayBuffer>, length: number, offset: number) => {\n        const end = offset + length;\n        let currHigh = 0;\n        const codes = [];\n        for (let i = offset; i < end; i++) {\n            const curr = buf[i];\n            if (curr === 0) {\n                if (buf[i + 1] === currHigh) {\n                    codes.push(buf[i++] + (currHigh << 8));\n                } else {\n                    currHigh = buf[++i];\n                }\n            } else {\n                codes.push(buf[i] + (currHigh << 8));\n            }\n        }\n        return fromCharCode.apply(null, codes);\n    }\n}","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nimport TYPES from \"@/serializers/sia/types\";\nimport Uint8ArrayWriter from \"@/serializers/sia/writer/Uint8ArrayWriter\";\nimport utfz from \"@/serializers/sia/utfz\";\n\nconst big_zero = BigInt(0);\nconst big_one = BigInt(1);\nconst big_8 = BigInt(8);\nconst big2p8m1 = BigInt(2 ** 8 - 1);\nconst big_16 = BigInt(16);\nconst big_2p16m1 = BigInt(2 ** 16 - 1);\nconst big_32 = BigInt(32);\nconst big_2p32m1 = BigInt(2 ** 32 - 1);\n\nconst big_64 = BigInt(64);\nconst big_0x100 = BigInt(0x100);\nconst big_0x10000 = BigInt(0x10000);\nconst big_0x100000000 = BigInt(0x100000000);\nconst big_m0x80 = BigInt(-0x80);\nconst big_m0x8000 = BigInt(-0x8000);\nconst big_m0x80000000 = BigInt(-0x80000000);\nconst big_max_safe_int = 18446744073709551615n;\nconst big_min_safe_int = BigInt(Number.MIN_SAFE_INTEGER);\n\nexport default abstract class TypeWriter extends Uint8ArrayWriter {\n    public addOString(string: String) {\n        this.writeUInt8(TYPES.ostring);\n        this.addString(string.toString())\n    }\n\n    public addString(string: string) {\n        const strLen = string.length;\n\n        if (strLen < 60) {\n            this.writeUInt8(TYPES.utfz);\n            const lenIndex = this.offset;\n            this.offset++;\n\n            const byteLength = utfz.pack(string, strLen, this.buffer, this.offset);\n\n            this.buffer[lenIndex] = byteLength;\n            this.offset += byteLength;\n            return;\n        }\n\n        const maxBytes = strLen * 3;\n        const startOffset = this.offset;\n\n        if (maxBytes < 0x100) {\n            this.buffer[this.offset++] = TYPES.string8;\n            const lenIndex = this.offset;\n            this.offset++;\n            const byteLength = this.writeString(string, this.offset);\n            this.buffer[lenIndex] = byteLength;\n            this.offset += byteLength;\n        } else if (maxBytes < 0x10000) {\n            this.buffer[this.offset++] = TYPES.string16;\n            const lenIndex = this.offset;\n            this.offset += 2;\n            const byteLength = this.writeString(string, this.offset);\n            this.buffer[lenIndex] = byteLength & 0xff;\n            this.buffer[lenIndex + 1] = (byteLength >> 8) & 0xff;\n            this.offset += byteLength;\n        } else {\n            this.buffer[this.offset++] = TYPES.string32;\n            const lenIndex = this.offset;\n            this.offset += 4;\n            const byteLength = this.writeString(string, this.offset);\n            this.buffer[lenIndex] = byteLength & 0xff;\n            this.buffer[lenIndex + 1] = (byteLength >> 8) & 0xff;\n            this.buffer[lenIndex + 2] = (byteLength >> 16) & 0xff;\n            this.buffer[lenIndex + 3] = (byteLength >>> 24) & 0xff;\n            this.offset += byteLength;\n        }\n    }\n\n\n    public ensureCapacity(requiredLength: number) {\n        if (this.buffer.length < requiredLength) {\n            const newSize = Math.pow(2, Math.ceil(Math.log2(requiredLength)));\n            const newBuffer = new Uint8Array(newSize);\n            newBuffer.set(this.buffer);\n            this.buffer = newBuffer;\n        }\n    }\n\n    public addRef(ref: number) {\n        if (ref < 0x100) {\n            this.writeUInt8(TYPES.ref8);\n            this.writeUInt8(ref);\n        } else if (ref < 0x10000) {\n            this.writeUInt8(TYPES.ref16);\n            this.writeUInt16(ref);\n        } else if (ref < 0x100000000) {\n            this.writeUInt8(TYPES.ref32);\n            this.writeUInt32(ref);\n        } else {\n            throw `Ref size ${ref} is too big`;\n        }\n    }\n\n    public addORef(ref: number) {\n        if (ref < 0x100) {\n            this.writeUInt8(TYPES.oref8);\n            this.writeUInt8(ref);\n        } else if (ref < 0x10000) {\n            this.writeUInt8(TYPES.oref16);\n            this.writeUInt16(ref);\n        } else if (ref < 0x100000000) {\n            this.writeUInt8(TYPES.oref32);\n            this.writeUInt32(ref);\n        } else {\n            throw `Object Ref size ${ref} is too big`;\n        }\n    }\n\n    public addNumber(number: number) {\n        if (Number.isInteger(number)) return this.addInteger(number);\n        return this.addFloat(number);\n    }\n\n    public addBigInt(number: bigint) {\n        const dv = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.length);\n\n        if (number < big_zero) {\n            if (number >= big_m0x80) {\n                this.writeUInt8(TYPES.bigint8);\n                this.writeInt8(Number(number));\n                return;\n            } else if (number >= big_m0x8000) {\n                this.writeUInt8(TYPES.bigint16);\n                this.writeInt16(Number(number));\n                return;\n            } else if (number >= big_m0x80000000) {\n                this.writeUInt8(TYPES.bigint32);\n                this.writeInt32(Number(number));\n                return;\n            } else if (number >= big_min_safe_int) {\n                this.writeUInt8(TYPES.bigint64);\n                this.writeBigInt64(number);\n                return;\n            } else {\n                this.writeUInt8(TYPES.bigintN);\n                number = -number;\n            }\n        } else {\n            if (number < big_0x100) {\n                this.writeUInt8(TYPES.biguint8);\n                this.writeUInt8(Number(number));\n                return;\n            } else if (number < big_0x10000) {\n                this.writeUInt8(TYPES.biguint16);\n                this.writeUInt16(Number(number));\n                return;\n            } else if (number < big_0x100000000) {\n                this.writeUInt8(TYPES.biguint32);\n                this.writeUInt32(Number(number));\n                return;\n            } else if (number <= big_max_safe_int) {\n                this.writeUInt8(TYPES.biguint64);\n                this.writeBigUInt64(number);\n                return;\n            } else {\n                this.writeUInt8(TYPES.biguintN);\n            }\n        }\n\n        let length = 0;\n        const startOffset = this.offset + 1;\n\n        while (number > big_zero) {\n            const chunk = BigInt.asUintN(64, number);\n            this.writeBigUInt64AtOffset(chunk, startOffset + 8 * length);\n            number = number >> big_64;\n            length++;\n        }\n\n        dv.setUint8(this.offset, length);\n        this.offset = startOffset + 8 * length;\n    }\n\n    public addInteger(number: number) {\n        if (number < 0) {\n            if (number >= -0x80) {\n                this.writeUInt8(TYPES.int8);\n                this.writeInt8(number);\n            } else if (number >= -0x8000) {\n                this.writeUInt8(TYPES.int16);\n                this.writeInt16(number);\n            } else if (number >= -0x80000000) {\n                this.writeUInt8(TYPES.int32);\n                this.writeInt32(number);\n            } else {\n                this.addFloat(number);\n            }\n        } else {\n            if (number < 0x100) {\n                this.writeUInt8(TYPES.uint8);\n                this.writeUInt8(number);\n            } else if (number < 0x10000) {\n                this.writeUInt8(TYPES.uint16);\n                this.writeUInt16(number);\n            } else if (number < 0x100000000) {\n                this.writeUInt8(TYPES.uint32);\n                this.writeUInt32(number);\n            } else {\n                this.addFloat(number);\n            }\n        }\n    }\n\n    public addFloat(number: number) {\n        this.writeUInt8(TYPES.float64);\n        this.writeDouble(number);\n    }\n\n    public addONumber(number: Number) {\n        this.writeUInt8(TYPES.onumber);\n        this.addNumber(+number);\n    }\n\n    public addRegExp(regexp: RegExp) {\n        this.writeUInt8(TYPES.regexp);\n        const encodedFlags = (regexp.global as unknown as number << 0) |\n            (regexp.ignoreCase as unknown as number << 1) |\n            (regexp.multiline as unknown as number << 2) |\n            (regexp.unicode as unknown as number << 3) |\n            (regexp.sticky as unknown as number << 4);\n        this.writeInt8(encodedFlags);\n        this.addString(regexp.source);\n    }\n\n    public addDate(date: Date) {\n        this.writeUInt8(TYPES.date);\n        this.writeDouble(date.getTime());\n    }\n\n    public startArray(length: number) {\n        if (length < 0x100) {\n            this.writeUInt8(TYPES.array8);\n            this.writeUInt8(length);\n        } else if (length < 0x10000) {\n            this.writeUInt8(TYPES.array16);\n            this.writeUInt16(length);\n        } else if (length < 0x100000000) {\n            this.writeUInt8(TYPES.array32);\n            this.writeUInt32(length);\n        } else {\n            throw `Array of size ${length} is too big to serialize`;\n        }\n    }\n\n    public startObject() {\n        this.writeUInt8(TYPES.objectStart);\n    }\n\n    public endObject() {\n        this.writeUInt8(TYPES.objectEnd);\n    }\n\n    public startMap() {\n        this.writeUInt8(TYPES.mapStart);\n    }\n\n    public endMap() {\n        this.writeUInt8(TYPES.mapEnd);\n    }\n\n    public startSet() {\n        this.writeUInt8(TYPES.setStart);\n    }\n\n    public endSet() {\n        this.writeUInt8(TYPES.setEnd);\n    }\n\n    public addBoolean(bool: boolean) {\n        const type = bool ? TYPES.true : TYPES.false;\n        this.writeUInt8(type);\n    }\n\n    public addOBoolean(bool: Boolean) {\n        const type = bool ? TYPES.otrue : TYPES.ofalse;\n        this.writeUInt8(type);\n    }\n\n    public addNull() {\n        this.writeUInt8(TYPES.null);\n    }\n\n    public addONull() {\n        this.writeUInt8(TYPES.onull);\n    }\n\n    public addUndefined() {\n        this.writeUInt8(TYPES.undefined);\n    }\n\n    public addArrayBuffer(item: ArrayBuffer) {\n        const {byteLength} = item;\n        if (byteLength < 0x100) {\n            this.writeUInt8(TYPES.bin8);\n            this.writeUInt8(byteLength);\n            new Uint8Array(item).forEach((byte) => {\n                this.writeUInt8(byte);\n            });\n        } else if (byteLength < 0x10000) {\n            this.writeUInt8(TYPES.bin16);\n            this.writeUInt16(byteLength);\n            new Uint8Array(item).forEach((byte) => {\n                this.writeUInt8(byte);\n            });\n        } else if (byteLength < 0x100000000) {\n            this.writeUInt8(TYPES.bin32);\n            this.writeUInt32(byteLength);\n            new Uint8Array(item).forEach((byte) => {\n                this.writeUInt8(byte);\n            });\n        } else {\n            throw `ArrayBuffer of size ${byteLength} is too big to serialize`;\n        }\n    }\n\n    public copyTypedArrayToBuffer(item: { buffer: ArrayBufferLike, byteOffset: number, byteLength: number }) {\n        const byteView = new Uint8Array(item.buffer, item.byteOffset, item.byteLength);\n        this.buffer.set(byteView, this.offset);\n        this.offset += item.byteLength;\n    }\n\n    public addInt8Array(item: Int8Array) {\n        const {length} = item;\n        if (length < 0x100) {\n            this.writeUInt8(TYPES.int8array8);\n            this.writeUInt8(length);\n        } else if (length < 0x10000) {\n            this.writeUInt8(TYPES.int8array16);\n            this.writeUInt16(length);\n        } else if (length < 0x100000000) {\n            this.writeUInt8(TYPES.int8array32);\n            this.writeUInt32(length);\n        } else {\n            throw new Error(`Buffer of size ${length} is too big to serialize`);\n        }\n        this.copyTypedArrayToBuffer(item);\n    }\n\n    public addUint8Array(item: Uint8Array) {\n        const {length} = item;\n        if (item.length < 0x100) {\n            this.writeUInt8(TYPES.uint8array8);\n            this.writeUInt8(length);\n        } else if (item.length < 0x10000) {\n            this.writeUInt8(TYPES.uint8array16);\n            this.writeUInt16(length);\n        } else if (item.length < 0x100000000) {\n            this.writeUInt8(TYPES.uint8array32);\n            this.writeUInt32(length);\n        } else {\n            throw `Buffer of size ${length} is too big to serialize`;\n        }\n        this.copyTypedArrayToBuffer(item);\n    }\n\n    public addUint8ClampedArray(item: Uint8ClampedArray) {\n        const {length} = item;\n        if (item.length < 0x100) {\n            this.writeUInt8(TYPES.uint8clampedarray8);\n            this.writeUInt8(length);\n        } else if (item.length < 0x10000) {\n            this.writeUInt8(TYPES.uint8clampedarray16);\n            this.writeUInt16(length);\n        } else if (item.length < 0x100000000) {\n            this.writeUInt8(TYPES.uint8clampedarray32);\n            this.writeUInt32(length);\n        } else {\n            throw `Buffer of size ${length} is too big to serialize`;\n        }\n        this.copyTypedArrayToBuffer(item);\n    }\n\n    public addInt16Array(item: Int16Array) {\n        const {length} = item;\n        if (item.length < 0x100) {\n            this.writeUInt8(TYPES.int16array8);\n            this.writeUInt8(length);\n        } else if (item.length < 0x10000) {\n            this.writeUInt8(TYPES.int16array16);\n            this.writeUInt16(length);\n        } else if (item.length < 0x100000000) {\n            this.writeUInt8(TYPES.int16array32);\n            this.writeUInt32(length);\n        } else {\n            throw `Buffer of size ${length} is too big to serialize`;\n        }\n        this.copyTypedArrayToBuffer(item);\n    }\n\n    public addUint16Array(item: Uint16Array) {\n        const {length} = item;\n        if (item.length < 0x100) {\n            this.writeUInt8(TYPES.uint16array8);\n            this.writeUInt8(length);\n        } else if (item.length < 0x10000) {\n            this.writeUInt8(TYPES.uint16array16);\n            this.writeUInt16(length);\n        } else if (item.length < 0x100000000) {\n            this.writeUInt8(TYPES.uint16array32);\n            this.writeUInt32(length);\n        } else {\n            throw `Buffer of size ${length} is too big to serialize`;\n        }\n        this.copyTypedArrayToBuffer(item);\n    }\n\n    public addInt32Array(item: Int32Array) {\n        const {length} = item;\n        if (item.length < 0x100) {\n            this.writeUInt8(TYPES.int32array8);\n            this.writeUInt8(length);\n        } else if (item.length < 0x10000) {\n            this.writeUInt8(TYPES.int32array16);\n            this.writeUInt16(length);\n        } else if (item.length < 0x100000000) {\n            this.writeUInt8(TYPES.int32array32);\n            this.writeUInt32(length);\n        } else {\n            throw `Buffer of size ${length} is too big to serialize`;\n        }\n        this.copyTypedArrayToBuffer(item);\n    }\n\n    public addUint32Array(item: Uint32Array) {\n        const {length} = item;\n        if (item.length < 0x100) {\n            this.writeUInt8(TYPES.uint32array8);\n            this.writeUInt8(length);\n        } else if (item.length < 0x10000) {\n            this.writeUInt8(TYPES.uint32array16);\n            this.writeUInt16(length);\n        } else if (item.length < 0x100000000) {\n            this.writeUInt8(TYPES.uint32array32);\n            this.writeUInt32(length);\n        } else {\n            throw `Buffer of size ${length} is too big to serialize`;\n        }\n        this.copyTypedArrayToBuffer(item);\n    }\n\n    public addFloat32Array(item: Float32Array) {\n        const {length} = item;\n        if (item.length < 0x100) {\n            this.writeUInt8(TYPES.float32array8);\n            this.writeUInt8(length);\n        } else if (item.length < 0x10000) {\n            this.writeUInt8(TYPES.float32array16);\n            this.writeUInt16(length);\n        } else if (item.length < 0x100000000) {\n            this.writeUInt8(TYPES.float32array32);\n            this.writeUInt32(length);\n        } else {\n            throw `Buffer of size ${length} is too big to serialize`;\n        }\n        this.copyTypedArrayToBuffer(item);\n    }\n\n    public addFloat64Array(item: Float64Array) {\n        const {length} = item;\n        if (item.length < 0x100) {\n            this.writeUInt8(TYPES.float64array8);\n            this.writeUInt8(length);\n        } else if (item.length < 0x10000) {\n            this.writeUInt8(TYPES.float64array16);\n            this.writeUInt16(length);\n        } else if (item.length < 0x100000000) {\n            this.writeUInt8(TYPES.float64array32);\n            this.writeUInt32(length);\n        } else {\n            throw `Buffer of size ${length} is too big to serialize`;\n        }\n        this.copyTypedArrayToBuffer(item);\n    }\n\n    public addBigInt64Array(item: BigInt64Array) {\n        const {length} = item;\n        if (item.length < 0x100) {\n            this.writeUInt8(TYPES.bigint64array8);\n            this.writeUInt8(length);\n        } else if (item.length < 0x10000) {\n            this.writeUInt8(TYPES.bigint64array16);\n            this.writeUInt16(length);\n        } else if (item.length < 0x100000000) {\n            this.writeUInt8(TYPES.bigint64array32);\n            this.writeUInt32(length);\n        } else {\n            throw `Buffer of size ${length} is too big to serialize`;\n        }\n        this.copyTypedArrayToBuffer(item);\n    }\n\n    public addBigUint64Array(item: BigUint64Array) {\n        const {length} = item;\n        if (item.length < 0x100) {\n            this.writeUInt8(TYPES.biguint64array8);\n            this.writeUInt8(length);\n        } else if (item.length < 0x10000) {\n            this.writeUInt8(TYPES.biguint64array16);\n            this.writeUInt16(length);\n        } else if (item.length < 0x100000000) {\n            this.writeUInt8(TYPES.biguint64array32);\n            this.writeUInt32(length);\n        } else {\n            throw `Buffer of size ${length} is too big to serialize`;\n        }\n        this.copyTypedArrayToBuffer(item);\n    }\n}","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nimport TypeWriter from \"@/serializers/sia/writer/TypeWriter\";\nimport {Serializer} from \"src/serializers\";\nimport TYPES from \"@/serializers/sia/types\";\nimport utfz from \"@/serializers/sia/utfz\";\n\nconst encodedFlagsLookup = [\n    '', 'g', 'i', 'gi', 'm', 'gm', 'im', 'gim', 'u', 'gu', 'iu', 'giu', 'mu', 'gmu', 'imu', 'gimu',\n    'y', 'gy', 'iy', 'giy', 'my', 'gmy', 'imy', 'gimy', 'uy', 'guy', 'iuy', 'giuy', 'muy', 'gmuy', 'imuy', 'gimuy'\n];\nconst big_64 = 64n;\nconst bigIndices = new Array(2 ** 8).fill(0).map((_, i) => BigInt(i));\nconst textDecoder = new TextDecoder('utf-8');\n\nclass SiaSerializer extends TypeWriter implements Serializer<any, Uint8Array<ArrayBuffer>> {\n    protected buffer: Uint8Array<ArrayBuffer>\n    protected keyRefIndex = 0;\n    private keyRefMap = new Map<string, number>()\n    protected objectRefIndex = 0;\n    private objectRefMap = new Map<any, number>()\n    protected offset = 0;\n    private readonly decoderMap\n\n    private readonly registry = new Map<string | (new (...args: any) => any), (writer: SiaSerializer, item: any, keyRefMap: Map<string, number>, objectRefMap: Map<any, number>) => void>\n\n    public constructor(private readonly size: number = 33554432, private readonly decoderSize: number = 256000) {\n        super();\n        this.decoderMap = new Array(decoderSize)\n        this.buffer = new Uint8Array(this.size)\n        this.register<string>('string', (writer, item) => writer.addString(item))\n        this.register<undefined>('undefined', (writer) => writer.addUndefined())\n        this.register<number>('number', (writer, item) => writer.addNumber(item))\n        this.register<boolean>('boolean', (writer, item) => writer.addBoolean(item))\n        this.register<bigint>('bigint', (writer, item) => writer.addBigInt(item))\n        this.register<object>('object', (writer, item, keyRefMap, objectRefMap) => {\n            if (item === null) return writer.addNull()\n            const prototype = Object.getPrototypeOf(item);\n            if (prototype === null) return writer.addONull();\n            const serializer = writer.findSerializer(prototype.constructor)\n            if (serializer == null) throw new Error(`Serializer for ${item} not found!`)\n            serializer(writer, item, keyRefMap, objectRefMap)\n        })\n        this.register<any>(Object, (writer, item, keyRefMap, objectRefMap) => {\n            const ref = objectRefMap.get(item);\n            if (ref === undefined) objectRefMap.set(item, writer.nextObjectRefIndex());\n            else return writer.addORef(ref);\n            writer.startObject();\n            for (const key in item) {\n                const ref = keyRefMap.get(key);\n                if (ref === undefined) {\n                    keyRefMap.set(key, writer.nextKeyRefIndex());\n                    writer.addString(key);\n                } else {\n                    writer.addRef(ref);\n                }\n                writer.serialize(item[key]);\n            }\n            writer.endObject();\n        })\n        this.register<Array<any>>(Array, (writer, item, keyRefMap, objectRefMap) => {\n            const ref = objectRefMap.get(item);\n            if (ref === undefined) objectRefMap.set(item, writer.nextObjectRefIndex());\n            else return writer.addORef(ref);\n            writer.startArray(item.length);\n            for (const member of item) {\n                writer.serialize(member);\n            }\n        })\n        this.register<Set<any>>(Set, (writer, item, keyRefMap, objectRefMap) => {\n            const ref = objectRefMap.get(item);\n            if (ref === undefined) objectRefMap.set(item, writer.nextObjectRefIndex());\n            else return writer.addORef(ref);\n            writer.startSet();\n            for (const member of item) {\n                writer.serialize(member);\n            }\n            writer.endSet();\n        })\n        this.register<Map<any, any>>(Map, (writer, item, keyRefMap, objectRefMap) => {\n            const ref = objectRefMap.get(item);\n            if (ref === undefined) objectRefMap.set(item, writer.nextObjectRefIndex());\n            else return writer.addORef(ref);\n            writer.startMap();\n            for (const [key, value] of item) {\n                writer.serialize(key);\n                writer.serialize(value);\n            }\n            writer.endMap();\n        })\n        this.register<Int8Array>(Int8Array, (writer, item) => writer.addInt8Array(item))\n        this.register<Uint8Array>(Uint8Array, (writer, item) => writer.addUint8Array(item))\n        this.register<Uint8ClampedArray>(Uint8ClampedArray, (writer, item) => writer.addUint8ClampedArray(item))\n        this.register<Int16Array>(Int16Array, (writer, item) => writer.addInt16Array(item))\n        this.register<Uint16Array>(Uint16Array, (writer, item) => writer.addUint16Array(item))\n        this.register<Int32Array>(Int32Array, (writer, item) => writer.addInt32Array(item))\n        this.register<Uint32Array>(Uint32Array, (writer, item) => writer.addUint32Array(item))\n        this.register<Float32Array>(Float32Array, (writer, item) => writer.addFloat32Array(item))\n        this.register<Float64Array>(Float64Array, (writer, item) => writer.addFloat64Array(item))\n        this.register<BigInt64Array>(BigInt64Array, (writer, item) => writer.addBigInt64Array(item))\n        this.register<BigUint64Array>(BigUint64Array, (writer, item) => writer.addBigUint64Array(item))\n        this.register<ArrayBuffer>(ArrayBuffer, (writer, item) => writer.addArrayBuffer(item))\n        this.register<Date>(Date, (writer, item) => writer.addDate(item))\n        this.register<RegExp>(RegExp, (writer, item) => writer.addRegExp(item))\n        this.register<Number>(Number, (writer, item) => writer.addONumber(item))\n        this.register<String>(String, (writer, item) => writer.addOString(item))\n        this.register<Boolean>(Boolean, (writer, item) => writer.addOBoolean(item))\n    }\n\n    public register<T>(type: string | (new (...args: any) => T), fn: (writer: SiaSerializer, item: T, keyRefMap: Map<string, number>, objectRefMap: Map<any, number>) => void) {\n        this.registry.set(type, fn)\n    }\n\n    public unregister(type: string | ObjectConstructor) {\n        this.registry.delete(type)\n    }\n\n    public findSerializer<T>(type: string | (new (...args: any) => T)) {\n        return this.registry.get(type)\n    }\n\n    public nextObjectRefIndex() {\n        return this.objectRefIndex++\n    }\n\n    public nextKeyRefIndex() {\n        return this.keyRefIndex++\n    }\n\n    public serialize(data: any) {\n        const type = typeof data;\n        this.findSerializer(type)?.(this, data, this.keyRefMap, this.objectRefMap)\n        return this.buffer.slice(0, this.offset);\n    }\n\n    public deserialize(buffer: Uint8Array<ArrayBuffer>): any {\n        this.buffer = buffer;\n        return this.readBlock(new DataView(\n            buffer.buffer,\n            buffer.byteOffset,\n            buffer.byteLength\n        ));\n    }\n\n    private readKey(blockType: number, dv: DataView) {\n        switch (blockType) {\n            case TYPES.ref8: {\n                const ref = this.readUInt8();\n                return this.decoderMap[ref];\n            }\n\n            case TYPES.ref16: {\n                const ref = this.readUInt16();\n                return this.decoderMap[ref];\n            }\n\n            case TYPES.ref32: {\n                const ref = this.readUInt32(dv);\n                return this.decoderMap[ref];\n            }\n\n            case TYPES.utfz: {\n                const length = this.readUInt8();\n                const str = utfz.unpack(this.buffer, length, this.offset);\n                this.offset += length;\n                this.decoderMap[this.nextKeyRefIndex()] = str;\n                return str;\n            }\n\n            case TYPES.string8: {\n                const length = this.readUInt8();\n                const str = this.readString(length);\n                this.decoderMap[this.nextKeyRefIndex()] = str;\n                return str;\n            }\n\n            case TYPES.string16: {\n                const length = this.readUInt16();\n                const str = this.readString(length);\n                this.decoderMap[this.nextKeyRefIndex()] = str;\n                return str;\n            }\n\n            case TYPES.string32: {\n                const length = this.readUInt32(dv);\n                const str = this.readString(length);\n                this.decoderMap[this.nextKeyRefIndex()] = str;\n                return str;\n            }\n\n            default:\n                throw `Key of type ${blockType} is invalid.`;\n        }\n    }\n\n    private readBlock(dv: DataView): any {\n        const blockType = this.buffer[this.offset++]; //this.readUInt8();\n        switch (blockType) {\n            case TYPES.utfz: {\n                const length = this.readUInt8();\n                const str = utfz.unpack(this.buffer, length, this.offset);\n                this.offset += length;\n                return str;\n            }\n\n            case TYPES.string8: {\n                const len = this.buffer[this.offset++];\n                const str = textDecoder.decode(this.buffer.subarray(this.offset, this.offset + len));\n                this.offset += len;\n                return str;\n            }\n            case TYPES.string16: {\n                // Little-endian 16-bit length\n                const len = this.buffer[this.offset] | (this.buffer[this.offset + 1] << 8);\n                this.offset += 2;\n                const str = textDecoder.decode(this.buffer.subarray(this.offset, this.offset + len));\n                this.offset += len;\n                return str;\n            }\n            case TYPES.string32: {\n                const len = dv.getUint32(this.offset, true);\n                this.offset += 4;\n                const str = textDecoder.decode(this.buffer.subarray(this.offset, this.offset + len));\n                this.offset += len;\n                return str;\n            }\n\n\n            case TYPES.bin8: {\n                const length = this.readUInt8();\n                const buf = new Uint8Array(length);\n                buf.set(this.buffer.subarray(this.offset, this.offset + length));\n                this.offset += length;\n                return buf;\n            }\n\n            case TYPES.bin16: {\n                const length = this.readUInt16();\n                const buf = new Uint8Array(length);\n                buf.set(this.buffer.subarray(this.offset, this.offset + length));\n                this.offset += length;\n                return buf;\n            }\n\n            case TYPES.bin32: {\n                const length = this.readUInt32(dv);\n                const buf = new Uint8Array(length);\n                buf.set(this.buffer.subarray(this.offset, this.offset + length));\n                this.offset += length;\n                return buf;\n            }\n\n            case TYPES.int8: {\n                return this.readInt8(dv);\n            }\n\n            case TYPES.int16: {\n                return this.readInt16(dv);\n            }\n\n            case TYPES.int32: {\n                return this.readInt32(dv);\n            }\n\n            case TYPES.uint8: {\n                return this.readUInt8();\n            }\n\n            case TYPES.uint16: {\n                return this.readUInt16();\n            }\n\n            case TYPES.uint32: {\n                return this.readUInt32(dv);\n            }\n\n            case TYPES.float64: {\n                return this.readDouble(dv);\n            }\n\n            case TYPES.false:\n                return false;\n\n            case TYPES.true:\n                return true;\n\n            case TYPES.null:\n                return null;\n\n            case TYPES.undefined:\n                return undefined;\n\n            case TYPES.objectStart: {\n                const obj: any = {};\n                this.objectRefMap.set(this.nextObjectRefIndex(), obj);\n                let curr = this.buffer[this.offset++];\n                while (curr !== TYPES.objectEnd) {\n                    obj[this.readKey(curr, dv)] = this.readBlock(dv);\n                    curr = this.buffer[this.offset++];\n                }\n                return obj;\n            }\n\n            case TYPES.mapStart: {\n                const map: any = new Map();\n                this.objectRefMap.set(this.nextObjectRefIndex(), map);\n                let curr = this.buffer[this.offset];\n                while (curr !== TYPES.mapEnd) {\n                    const key = this.readBlock(dv);\n                    const value = this.readBlock(dv);\n                    map.set(key, value);\n                    curr = this.buffer[this.offset];\n                }\n                this.offset++;\n                return map;\n            }\n\n            case TYPES.setStart: {\n                const set: any = new Set();\n                this.objectRefMap.set(this.nextObjectRefIndex(), set);\n                let curr = this.buffer[this.offset];\n                while (curr !== TYPES.setEnd) {\n                    set.add(this.readBlock(dv));\n                    curr = this.buffer[this.offset];\n                }\n                this.offset++;\n                return set;\n            }\n            case TYPES.array8: {\n                const length = this.readUInt8();\n                const arr: any = new Array(length);\n                this.objectRefMap.set(this.nextObjectRefIndex(), arr);\n                for (let i = 0; i < length; i++) {\n                    arr[i] = this.readBlock(dv);\n                }\n                return arr;\n            }\n\n            case TYPES.array16: {\n                const length = this.readUInt16();\n                const arr: any = new Array(length);\n                this.objectRefMap.set(this.nextObjectRefIndex(), arr);\n                for (let i = 0; i < length; i++) {\n                    arr[i] = this.readBlock(dv);\n                }\n                return arr;\n            }\n\n            case TYPES.array32: {\n                const length = this.readUInt32(dv);\n                const arr: any = new Array(length);\n                this.objectRefMap.set(this.nextObjectRefIndex(), arr);\n                for (let i = 0; i < length; i++) {\n                    arr[i] = this.readBlock(dv);\n                }\n                return arr;\n            }\n            case TYPES.bigint8: {\n                return BigInt(this.readInt8(dv))\n            }\n            case TYPES.bigint16: {\n                return BigInt(this.readInt16(dv))\n            }\n            case TYPES.bigint32: {\n                return BigInt(this.readInt32(dv))\n            }\n            case TYPES.bigint64: {\n                return BigInt(this.readBigInt64(dv))\n            }\n            case TYPES.bigintN: {\n                const chunksCount = this.readUInt8();\n                let bigIntValue = 0n;\n                for (let i = 0; i < chunksCount; i++) {\n                    const bytesRead = dv.getBigUint64(this.offset, true); // Little-endian\n                    bigIntValue += bytesRead << (big_64 * bigIndices[i]);\n                    this.offset += 8;\n                }\n                return -bigIntValue;\n            }\n            case TYPES.biguint8: {\n                return BigInt(this.readUInt8())\n            }\n            case TYPES.biguint16: {\n                return BigInt(this.readUInt16())\n            }\n            case TYPES.biguint32: {\n                return BigInt(this.readUInt32(dv))\n            }\n            case TYPES.biguint64: {\n                return this.readBigUInt64(dv)\n            }\n            case TYPES.biguintN: {\n                const chunksCount = this.readUInt8();\n                let bigIntValue = 0n;\n                for (let i = 0; i < chunksCount; i++) {\n                    const bytesRead = dv.getBigUint64(this.offset, true); // Little-endian\n                    bigIntValue += bytesRead << (big_64 * bigIndices[i]);\n                    this.offset += 8;\n                }\n                return bigIntValue;\n            }\n\n            // For Int8Array (8-bit length marker variant)\n            case TYPES.int8array8: {\n                const length = this.readUInt8();\n                const offset = this.offset;\n                this.offset += length;\n                const slice = this.buffer.slice(offset, offset + length);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new Int8Array(newBuffer);\n            }\n\n            // For Int8Array (16-bit length marker variant)\n            case TYPES.int8array16: {\n                const length = this.readUInt16();\n                const offset = this.offset;\n                this.offset += length;\n                const slice = this.buffer.slice(offset, offset + length);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new Int8Array(newBuffer);\n            }\n\n            // For Int8Array (32-bit length marker variant)\n            case TYPES.int8array32: {\n                const length = this.readUInt32(dv);\n                const offset = this.offset;\n                this.offset += length;\n                const slice = this.buffer.slice(offset, offset + length);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new Int8Array(newBuffer);\n            }\n\n            // For Uint8Array\n            case TYPES.uint8array8: {\n                const length = this.readUInt8();\n                const offset = this.offset;\n                this.offset += length;\n                const result = new Uint8Array(length);\n                const slice = this.buffer.slice(offset, offset + length);\n                result.set(Uint8Array.from(slice));\n                return result;\n            }\n\n            case TYPES.uint8array16: {\n                const length = this.readUInt16();\n                const offset = this.offset;\n                this.offset += length;\n                const result = new Uint8Array(length);\n                const slice = this.buffer.slice(offset, offset + length);\n                result.set(Uint8Array.from(slice));\n                return result;\n            }\n\n            case TYPES.uint8array32: {\n                const length = this.readUInt32(dv);\n                const offset = this.offset;\n                this.offset += length;\n                const result = new Uint8Array(length);\n                const slice = this.buffer.slice(offset, offset + length);\n                result.set(Uint8Array.from(slice));\n                return result;\n            }\n\n\n            // For Uint8ClampedArray\n            case TYPES.uint8clampedarray8: {\n                const length = this.readUInt8();\n                const offset = this.offset;\n                this.offset += length;\n                const result = new Uint8ClampedArray(length);\n                const slice = this.buffer.slice(offset, offset + length);\n                result.set(Uint8ClampedArray.from(slice));\n                return result;\n            }\n\n            case TYPES.uint8clampedarray16: {\n                const length = this.readUInt16();\n                const offset = this.offset;\n                this.offset += length;\n                const result = new Uint8ClampedArray(length);\n                const slice = this.buffer.slice(offset, offset + length);\n                result.set(Uint8ClampedArray.from(slice));\n                return result;\n            }\n\n            case TYPES.uint8clampedarray32: {\n                const length = this.readUInt32(dv);\n                const offset = this.offset;\n                this.offset += length;\n                const result = new Uint8ClampedArray(length);\n                const slice = this.buffer.slice(offset, offset + length);\n                result.set(Uint8ClampedArray.from(slice));\n                return result;\n            }\n\n\n            // For Int16Array (8-bit length marker variant)\n            case TYPES.int16array8: {\n                const length = this.readUInt8();\n                const offset = this.offset;\n                this.offset += length * 2;\n                // Slice the buffer (returns a Node Buffer)\n                const slice = this.buffer.slice(offset, offset + length * 2);\n                // Create a new ArrayBuffer that contains exactly the data from the slice.\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new Int16Array(newBuffer);\n            }\n\n            // For Int16Array (16-bit length marker variant)\n            case TYPES.int16array16: {\n                const length = this.readUInt16();\n                const offset = this.offset;\n                this.offset += length * 2;\n                const slice = this.buffer.slice(offset, offset + length * 2);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new Int16Array(newBuffer);\n            }\n\n            // For Int16Array (32-bit length marker variant)\n            case TYPES.int16array32: {\n                const length = this.readUInt32(dv);\n                const offset = this.offset;\n                this.offset += length * 2;\n                const slice = this.buffer.slice(offset, offset + length * 2);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new Int16Array(newBuffer);\n            }\n\n\n            // For Uint16Array (8-bit length marker variant)\n            case TYPES.uint16array8: {\n                const length = this.readUInt8();\n                const offset = this.offset;\n                this.offset += length * 2;\n                const slice = this.buffer.slice(offset, offset + length * 2);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new Uint16Array(newBuffer);\n            }\n\n            // For Uint16Array (16-bit length marker variant)\n            case TYPES.uint16array16: {\n                const length = this.readUInt16();\n                const offset = this.offset;\n                this.offset += length * 2;\n                const slice = this.buffer.slice(offset, offset + length * 2);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new Uint16Array(newBuffer);\n            }\n\n            // For Uint16Array (32-bit length marker variant)\n            case TYPES.uint16array32: {\n                const length = this.readUInt32(dv);\n                const offset = this.offset;\n                this.offset += length * 2;\n                const slice = this.buffer.slice(offset, offset + length * 2);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new Uint16Array(newBuffer);\n            }\n\n            // For Int32Array (8-bit length marker variant)\n            case TYPES.int32array8: {\n                const length = this.readUInt8();\n                const offset = this.offset;\n                this.offset += length * 4;\n                const slice = this.buffer.slice(offset, offset + length * 4);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new Int32Array(newBuffer);\n            }\n\n            // For Int32Array (16-bit length marker variant)\n            case TYPES.int32array16: {\n                const length = this.readUInt16();\n                const offset = this.offset;\n                this.offset += length * 4;\n                const slice = this.buffer.slice(offset, offset + length * 4);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new Int32Array(newBuffer);\n            }\n\n            // For Int32Array (32-bit length marker variant)\n            case TYPES.int32array32: {\n                const length = this.readUInt32(dv);\n                const offset = this.offset;\n                this.offset += length * 4;\n                const slice = this.buffer.slice(offset, offset + length * 4);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new Int32Array(newBuffer);\n            }\n\n\n\n            // For Uint32Array (8-bit length marker variant)\n            case TYPES.uint32array8: {\n                const length = this.readUInt8();\n                const offset = this.offset;\n                this.offset += length * 4;\n                const slice = this.buffer.slice(offset, offset + length * 4);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new Uint32Array(newBuffer);\n            }\n\n            // For Uint32Array (16-bit length marker variant)\n            case TYPES.uint32array16: {\n                const length = this.readUInt16();\n                const offset = this.offset;\n                this.offset += length * 4;\n                const slice = this.buffer.slice(offset, offset + length * 4);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new Uint32Array(newBuffer);\n            }\n\n            // For Uint32Array (32-bit length marker variant)\n            case TYPES.uint32array32: {\n                const length = this.readUInt32(dv);\n                const offset = this.offset;\n                this.offset += length * 4;\n                const slice = this.buffer.slice(offset, offset + length * 4);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new Uint32Array(newBuffer);\n            }\n\n\n            // For Float32Array (8-bit length marker variant)\n            case TYPES.float32array8: {\n                const length = this.readUInt8();\n                const offset = this.offset;\n                this.offset += length * 4;\n                const slice = this.buffer.slice(offset, offset + length * 4);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new Float32Array(newBuffer);\n            }\n\n            // For Float32Array (16-bit length marker variant)\n            case TYPES.float32array16: {\n                const length = this.readUInt16();\n                const offset = this.offset;\n                this.offset += length * 4;\n                const slice = this.buffer.slice(offset, offset + length * 4);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new Float32Array(newBuffer);\n            }\n\n            // For Float32Array (32-bit length marker variant)\n            case TYPES.float32array32: {\n                const length = this.readUInt32(dv);\n                const offset = this.offset;\n                this.offset += length * 4;\n                const slice = this.buffer.slice(offset, offset + length * 4);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new Float32Array(newBuffer);\n            }\n\n\n\n            // For Float64Array (8-bit length marker variant)\n            case TYPES.float64array8: {\n                const length = this.readUInt8();\n                const offset = this.offset;\n                this.offset += length * 8;\n                const slice = this.buffer.slice(offset, offset + length * 8);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new Float64Array(newBuffer);\n            }\n\n            // For Float64Array (16-bit length marker variant)\n            case TYPES.float64array16: {\n                const length = this.readUInt16();\n                const offset = this.offset;\n                this.offset += length * 8;\n                const slice = this.buffer.slice(offset, offset + length * 8);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new Float64Array(newBuffer);\n            }\n\n            // For Float64Array (32-bit length marker variant)\n            case TYPES.float64array32: {\n                const length = this.readUInt32(dv);\n                const offset = this.offset;\n                this.offset += length * 8;\n                const slice = this.buffer.slice(offset, offset + length * 8);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new Float64Array(newBuffer);\n            }\n\n\n            // For BigInt64Array (8-bit length marker variant)\n            case TYPES.bigint64array8: {\n                const length = this.readUInt8();\n                const offset = this.offset;\n                this.offset += length * 8;\n                const slice = this.buffer.slice(offset, offset + length * 8);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new BigInt64Array(newBuffer);\n            }\n\n            // For BigInt64Array (16-bit length marker variant)\n            case TYPES.bigint64array16: {\n                const length = this.readUInt16();\n                const offset = this.offset;\n                this.offset += length * 8;\n                const slice = this.buffer.slice(offset, offset + length * 8);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new BigInt64Array(newBuffer);\n            }\n\n            // For BigInt64Array (32-bit length marker variant)\n            case TYPES.bigint64array32: {\n                const length = this.readUInt32(dv);\n                const offset = this.offset;\n                this.offset += length * 8;\n                const slice = this.buffer.slice(offset, offset + length * 8);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new BigInt64Array(newBuffer);\n            }\n\n\n            // For BigUint64Array (8-bit length marker variant)\n            case TYPES.biguint64array8: {\n                const length = this.readUInt8();\n                const offset = this.offset;\n                this.offset += length * 8;\n                const slice = this.buffer.slice(offset, offset + length * 8);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new BigUint64Array(newBuffer);\n            }\n\n            // For BigUint64Array (16-bit length marker variant)\n            case TYPES.biguint64array16: {\n                const length = this.readUInt16();\n                const offset = this.offset;\n                this.offset += length * 8;\n                const slice = this.buffer.slice(offset, offset + length * 8);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new BigUint64Array(newBuffer);\n            }\n\n            // For BigUint64Array (32-bit length marker variant)\n            case TYPES.biguint64array32: {\n                const length = this.readUInt32(dv);\n                const offset = this.offset;\n                this.offset += length * 8;\n                const slice = this.buffer.slice(offset, offset + length * 8);\n                const newBuffer = slice.buffer.slice(slice.byteOffset, slice.byteOffset + slice.byteLength);\n                return new BigUint64Array(newBuffer);\n            }\n\n            case TYPES.date: {\n                return new Date(this.readDouble(dv));\n            }\n            case TYPES.regexp: {\n                const encodedFlags = this.readUInt8();\n                const source: any = this.readBlock(dv);\n                const flags = encodedFlagsLookup[encodedFlags];\n                return new RegExp(source, flags);\n            }\n            case TYPES.oref8: {\n                const key = this.readUInt8();\n                return this.objectRefMap.get(key);\n            }\n            case TYPES.oref16: {\n                const key = this.readUInt16();\n                return this.objectRefMap.get(key);\n            }\n            case TYPES.oref32: {\n                const key = this.readUInt32(dv);\n                return this.objectRefMap.get(key);\n            }\n            case TYPES.onull: {\n                return Object.create(null);\n            }\n            case TYPES.onumber: {\n                return Number(this.readBlock(dv));\n            }\n            case TYPES.ostring: {\n                return String(this.readBlock(dv));\n            }\n            case TYPES.otrue: {\n                return Boolean(true);\n            }\n            case TYPES.ofalse: {\n                return Boolean(false);\n            }\n            default:\n                throw `Unsupported type: ${blockType}`;\n        }\n    }\n\n    private readUInt8() {\n        return this.buffer[this.offset++];\n    }\n\n    private readUInt16() {\n        return this.buffer[this.offset++] + (this.buffer[this.offset++] << 8);\n    }\n\n    private readUInt32(dv: DataView) {\n        const value = dv.getUint32(this.offset, true);\n        this.offset += 4;\n        return value;\n    }\n\n    private readInt8(dv: DataView) {\n        const value = dv.getInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n\n    private readInt16(dv: DataView) {\n        const value = dv.getInt16(this.offset, true);\n        this.offset += 2;\n        return value;\n    }\n\n    private readInt32(dv: DataView) {\n        const value = dv.getInt32(this.offset, true);\n        this.offset += 4;\n        return value;\n    }\n\n    private readBigInt64(dv: DataView) {\n        const value = dv.getBigInt64(this.offset, true);\n        this.offset += 8;\n        return value;\n    }\n\n    private readBigUInt64(dv: DataView) {\n        const value = dv.getBigUint64(this.offset, true);\n        this.offset += 8;\n        return value;\n    }\n\n    private readDouble(dv: DataView) {\n        const value = dv.getFloat64(this.offset, true);\n        this.offset += 8;\n        return value;\n    }\n\n    private readString(length: number) {\n        const slice = this.buffer.subarray(this.offset, this.offset + length);\n        this.offset += length;\n        return textDecoder.decode(slice);\n    }\n}\n\nexport default {\n    serialize(obj: any): Uint8Array<ArrayBuffer> {\n        return new SiaSerializer().serialize(obj)\n    },\n    deserialize(obj: Uint8Array<ArrayBuffer>): any {\n        return new SiaSerializer().deserialize(obj)\n    },\n} as Serializer<any, Uint8Array<ArrayBuffer>>","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nimport Json from \"@/serializers/json\";\nimport Sia from \"@/serializers/sia\";\nimport {BackpressurePublisher, Publisher} from \"@/publishers\";\nimport {Sink} from \"@/sinks\";\nimport {Subscriber, Subscription} from \"@/subscriptions\";\n\nexport function deepCopy(obj: any, mode: 'sia' | 'json' = 'json') {\n    switch (mode) {\n        case \"sia\":\n            return Sia.deserialize(Sia.serialize(obj))\n        default:\n            return Json.deserialize(Json.serialize(obj))\n    }\n}\n\nexport function isPublisher(obj: any): obj is Publisher<any> {\n    return obj && typeof obj.subscribe === 'function';\n}\n\n\nexport function combine<T>(sink: Sink<T> & Publisher<T>, generator: ((sink: Sink<T>) => void)): Publisher<T> {\n    return new class CombinedPublisher extends BackpressurePublisher<T> {\n        public override subscribe(subscriber: Subscriber<T>): Subscription {\n            const gen = generator(sink) as unknown as Subscription\n            const sub = super.subscribe(subscriber)\n            return {\n                request(count: number) {\n                    sub.request(count)\n                    gen?.request(count)\n                },\n                unsubscribe() {\n                    sub.unsubscribe()\n                    gen?.unsubscribe()\n                }\n            };\n        }\n    }(sink)\n}","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nexport interface Peek<T> {\n    map<R>(fn: (val: T) => R): Peek<R>\n\n    flatMap<R>(fn: (val: T) => Peek<R>): Peek<R>\n\n    peek(fn: (val: T) => void): Peek<T>\n\n    get(): T\n}\n\nexport function peek<T>(obj: T) {\n    return {\n        map<R>(fn: (val: T) => R): Peek<R> {\n            return peek(fn(obj))\n        },\n        flatMap<R>(fn: <T>(val: T) => Peek<R>): Peek<R> {\n            return fn(obj)\n        },\n        peek(fn: <T>(val: T) => void): Peek<T> {\n            fn(obj)\n            return this;\n        },\n        get() {\n            return obj;\n        }\n    } as Peek<T>\n}\n\n\nexport function lazyPeek<T>(fn: (self: () => T) => T): Peek<T> {\n    const res = fn(() => res)\n    return peek(res)\n}","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\nimport {AbstractPipePublisher} from \"@/publishers/pipe\";\nimport {Publisher} from \"@/publishers\";\nimport {Sink} from \"@/sinks\";\nimport {Subscriber, Subscription} from \"@/subscriptions\";\nimport ManySink from \"@/sinks/many\";\nimport {Mono} from \"@/publishers/mono\";\nimport {Scheduler} from \"@/schedulers\";\nimport {combine} from \"@/utils\";\nimport json from \"@/serializers/json\";\nimport {MicroScheduler} from \"@/schedulers/micro\";\nimport {peek} from \"@/utils/peek\";\nimport {DelayScheduler} from \"@/schedulers/delay\";\n\nexport class Flux<T> extends AbstractPipePublisher<T> {\n    protected constructor(publisher: Publisher<T>) {\n        super(publisher)\n    }\n\n    public sinkType(): 'one' | 'many' {\n        return 'many';\n    }\n\n    /**\n     * Возвращает первый элемент потока как Mono.\n     */\n    public first(): Mono<T> {\n        return Mono.generate(sink => {\n            let sub: Subscription;\n            (sub = this.subscribe({\n                onNext(value: T) {\n                    sink.next(value)\n                    sub?.unsubscribe()\n                },\n                onError(error: Error) {\n                    sink.error(error)\n                },\n                onComplete() {\n                    sink.complete()\n                }\n            })).request(Number.MAX_SAFE_INTEGER)\n        })\n    }\n\n    /**\n     * Возвращает последний элемент потока как Mono.\n     */\n    public last(): Mono<T> {\n        return Mono.generate(sink => {\n            let lastValue: T | undefined\n            this.subscribe({\n                onNext(value: T): void {\n                    lastValue = value\n                },\n                onError: sink.error,\n                onComplete(): void {\n                    if (lastValue !== undefined) sink.next(lastValue)\n                    else sink.complete()\n                }\n            }).request(Number.MAX_SAFE_INTEGER)\n        })\n    }\n\n    /**\n     * Возвращает количество элементов в потоке.\n     */\n    public count(): Mono<number> {\n        return this.collect().map(value => value.length)\n    }\n\n    /**\n     * Проверяет наличие хотя бы одного элемента.\n     */\n    public hasElements(): Mono<boolean> {\n        return this.count().map(value => value > 0)\n    }\n\n    /**\n     * Собирает все элементы в массив и возвращает как Mono<T[]>.\n     */\n    public collect(force = false): Mono<T[]> {\n        return Mono.generate(sink => {\n            const buffer: T[] = []\n            peek(this.subscribe({\n                onNext(value: T): void {\n                    buffer.push(value)\n                },\n                onError(error: Error): void {\n                    sink.error(error)\n                },\n                onComplete(): void {\n                    sink.next(buffer)\n                }\n            }))\n                .peek(s => s.request(Number.MAX_SAFE_INTEGER))\n                .peek(s => {\n                    if (force) new MicroScheduler().schedule(() => {\n                        try {\n                            sink.next(buffer)\n                        } catch (e) {\n                        }\n                        s.unsubscribe()\n                    })\n                })\n        })\n    }\n\n    /**\n     * Индексирует элементы потока: [index, value].\n     */\n    public indexed(): Flux<[number, T]> {\n        let pipeSub: Subscription\n        return this.pipe((onNext, onError, onComplete) => {\n            let index = 0\n            pipeSub = this.subscribe({\n                onNext(value: T): void {\n                    onNext([index++, value])\n                },\n                onError,\n                onComplete\n            })\n        }, undefined, request => pipeSub?.request(request), () => pipeSub?.unsubscribe())\n    }\n\n    public skip(n: number): Flux<T> {\n        return this.indexed()\n            .filter(value => value[0] >= n)\n            .map(value => value[1])\n    }\n\n    public skipWhile(predicate: (value: T) => boolean): Flux<T> {\n        let pipeSub: Subscription\n        return this.pipe((onNext, onError, onComplete) => {\n            let skipping = true\n            pipeSub = this.subscribe({\n                onNext(value: T): void {\n                    if (!skipping || !predicate(value)) {\n                        skipping = false\n                        onNext(value)\n                    } else onNext(null as T)\n                },\n                onError,\n                onComplete\n            })\n        }, undefined, request => pipeSub?.request(request), () => pipeSub?.unsubscribe())\n    }\n\n    public skipUntil(other: Publisher<any>): Flux<T> {\n        let pipeSub: Subscription\n        return this.pipe((onNext, onError, onComplete) => {\n            let open = false;\n            const sub = this.subscribe({\n                onNext: (value) => {\n                    if (open) onNext(value)\n                    else onNext(null as T)\n                },\n                onError,\n                onComplete\n            })\n            const sub2 = other.subscribe({\n                onNext(value: any): void {\n                    open = true\n                },\n                onError,\n                onComplete(): void {\n                }\n            })\n            pipeSub = {\n                request(count: number) {\n                    sub.request(count)\n                    sub2.request(count)\n                },\n                unsubscribe() {\n                    sub.unsubscribe()\n                    sub2.unsubscribe()\n                }\n            } as Subscription\n        }, undefined, request => pipeSub?.request(request), () => pipeSub?.unsubscribe())\n    }\n\n    public distinct(): Flux<T> {\n        let sub: Subscription\n        return this.pipe((onNext, onError, onComplete) => {\n            const seen = new Set<T>()\n            sub = this.subscribe({\n                onNext: (value) => {\n                    if (!seen.has(value)) {\n                        seen.add(value)\n                        onNext(value)\n                    } else onNext(null as T)\n                },\n                onError,\n                onComplete\n            })\n        }, undefined, request => sub?.request(request), () => sub?.unsubscribe())\n    }\n\n    public distinctUntilChanged(deep: boolean = true): Flux<T> {\n        let sub: Subscription\n        return this.pipe((onNext, onError, onComplete) => {\n            let lastEmitted: string | T | null = null\n            sub = this.subscribe({\n                onNext(value: T) {\n                    let val: T | string = value\n                    if (deep) {\n                        try {\n                            val = json.serialize(value)\n                        } catch (e) {\n                            onError(e as Error)\n                            return\n                        }\n                    }\n                    if (lastEmitted != val) {\n                        lastEmitted = val\n                        onNext(value);\n                    } else onNext(null as T)\n                },\n                onError(error: Error) {\n                    onError(error)\n                },\n                onComplete() {\n                    onComplete()\n                }\n            })\n        }, undefined, request => sub?.request(request), () => sub?.unsubscribe())\n    }\n\n    public delayElements(ms: number): Flux<T> {\n        let sub: Subscription\n        return this.pipe((onNext, onError, onComplete) => {\n            let promise = Promise.resolve()\n            const emit = (fn: () => void) => {\n                promise = promise.then(() => new Promise<void>(resolve => {\n                    new DelayScheduler(ms).schedule(() => {\n                        fn()\n                        resolve()\n                    })\n                }))\n            }\n            sub = this.subscribe({\n                onNext(value: T) {\n                    emit(() => onNext(value))\n                },\n                onError(error: Error) {\n                    emit(() => onError(error))\n                },\n                onComplete() {\n                    emit(() => onComplete())\n                }\n            })\n        }, undefined, request => sub?.request(request), () => sub?.unsubscribe())\n    }\n\n    public concatWith(other: Publisher<T>): Flux<T> {\n        let pipeSub: Subscription\n        return this.pipe((onNext, onError, onComplete) => {\n            let second: Subscription | undefined\n            const first = this.subscribe({\n                onNext(value: T) {\n                    onNext(value)\n                },\n                onError(error: Error) {\n                    onError(error)\n                },\n                onComplete() {\n                    second = other.subscribe({\n                        onNext,\n                        onError,\n                        onComplete\n                    })\n                }\n            })\n            pipeSub = {\n                request(count: number) {\n                    first.request(count)\n                    second?.request(count)\n                },\n                unsubscribe() {\n                    first.unsubscribe()\n                    second?.unsubscribe()\n                }\n            } as Subscription\n        }, undefined, request => pipeSub?.request(request), () => pipeSub?.unsubscribe())\n    }\n\n    public mergeWith(other: Publisher<T>): Flux<T> {\n        let pipeSub: Subscription\n        return this.pipe((onNext, onError, onComplete) => {\n            let left = 2\n            const subscriber = {\n                onNext,\n                onError,\n                onComplete() {\n                    if (--left <= 0) {\n                        onComplete()\n                    }\n                }\n            } as Subscriber<T>\n            const first = this.subscribe(subscriber)\n            const second = other.subscribe(subscriber)\n            pipeSub = {\n                request(count: number) {\n                    first.request(count)\n                    second.request(count)\n                },\n                unsubscribe() {\n                    first.unsubscribe()\n                    second.unsubscribe()\n                }\n            } as Subscription\n        }, undefined, request => pipeSub?.request(request), () => pipeSub?.unsubscribe())\n    }\n\n    public reduce(reducer: (acc: T, next: T) => T): Mono<T> {\n        return this.collect().map(value => value.reduce(reducer))\n    }\n\n    public reduceWith<A>(seedFactory: () => A, reducer: (acc: A, next: T) => A): Mono<A> {\n        return Mono.generate(sink => {\n            let acc = seedFactory()\n            this.subscribe({\n                onNext(value: T) {\n                    acc = reducer(acc, value)\n                },\n                onError(error: Error) {\n                    sink.error(error)\n                },\n                onComplete() {\n                    sink.next(acc)\n                }\n            }).request(Number.MAX_SAFE_INTEGER)\n        })\n    }\n\n    public then(): Mono<void> {\n        return Mono.generate(sink => {\n            this.subscribe({\n                onNext(value: T) {\n                },\n                onError(error: Error) {\n                    sink.error(error)\n                },\n                onComplete() {\n                    sink.complete()\n                }\n            }).request(Number.MAX_SAFE_INTEGER)\n        })\n    }\n\n    public thenEmpty(other: Publisher<any>): Mono<void> {\n        return Mono.generate(sink => {\n            this.subscribe({\n                onNext(value: T) {\n                },\n                onError(error: Error) {\n                    sink.error(error)\n                },\n                onComplete() {\n                    other.subscribe({\n                        onNext(value: any) {\n                        },\n                        onError(error: Error) {\n                            sink.error(error)\n                        },\n                        onComplete() {\n                            sink.complete()\n                        }\n                    }).request(Number.MAX_SAFE_INTEGER)\n                }\n            }).request(Number.MAX_SAFE_INTEGER)\n        })\n    }\n\n    // =========================================================================\n    // =                            СТАТИЧЕСКИЕ МЕТОДЫ                         =\n    // =========================================================================\n\n    public static from<T>(publisher: Publisher<T>): Flux<T> {\n        return Flux.generate(sink => {\n            return publisher.subscribe({\n                onNext(value: T) {\n                    sink.next(value)\n                },\n                onError(error: Error) {\n                    sink.error(error)\n                },\n                onComplete() {\n                    sink.complete()\n                }\n            })\n        })\n    }\n\n    public static generate<T>(generator: ((sink: Sink<T>) => void)): Flux<T> {\n        return new Flux(combine(new ManySink<T>(), generator))\n    }\n\n    public static fromIterable<T>(iterable: Iterable<T>): Flux<T> {\n        return Flux.generate(sink => {\n            for (const value of iterable) {\n                sink.next(value);\n            }\n            sink.complete();\n        })\n    }\n\n    public static range(start: number, count: number): Flux<number> {\n        return Flux.generate(sink => {\n            let current = start;\n            for (let i = 0; i < count; i++) {\n                sink.next(current++);\n            }\n            sink.complete();\n        })\n    }\n\n    public static empty<T = never>(): Flux<T> {\n        return Flux.generate(sink => {\n            sink.complete()\n        })\n    }\n\n    public static defer<T>(factory: () => Flux<T>): Flux<T> {\n        return Flux.generate(sink => factory().subscribe({\n            onNext(value: T) {\n                sink.next(value)\n            },\n            onError(error: Error) {\n                sink.error(error)\n            },\n            onComplete() {\n                sink.complete()\n            }\n        }))\n    }\n\n    public subscribe({\n                         onNext = (value: T) => {\n                         }, onError = (error: Error) => {\n        }, onComplete = () => {\n        }\n                     } = {}): Subscription {\n        return this.publisher.subscribe({onNext, onError, onComplete});\n    }\n\n    public override pipe<R>(producer: (onNext: (value: R) => void, onError: (error: Error) => void, onComplete: () => void) => void, onSubscribe?: (subscriber: Subscriber<R>) => void, onRequest?: (request: number) => void, onUnsubscribe?: () => void): Flux<R> {\n        return super.pipe(producer, onSubscribe, onRequest, onUnsubscribe) as Flux<R>;\n    }\n\n    public override map<R>(fn: (value: T) => R): Flux<R> {\n        return super.map(fn) as Flux<R>;\n    }\n\n    public override mapNotNull<R>(fn: (value: T) => (R | null | undefined)): Flux<R> {\n        return super.mapNotNull(fn) as Flux<R>;\n    }\n\n    public override flatMap<R>(fn: (value: T) => Publisher<R>): Flux<R> {\n        return super.flatMap(fn) as Flux<R>;\n    }\n\n    public override filter(predicate: (value: T) => boolean): Flux<T> {\n        return super.filter(predicate) as Flux<T>;\n    }\n\n    public override filterWhen(predicate: (value: T) => Publisher<boolean>): Flux<T> {\n        return super.filterWhen(predicate) as Flux<T>;\n    }\n\n    public override cast<R>(): Flux<R> {\n        return super.cast() as Flux<R>;\n    }\n\n    public override switchIfEmpty(alternative: Publisher<T>): Flux<T> {\n        return super.switchIfEmpty(alternative) as Flux<T>;\n    }\n\n    public override onErrorReturn(replacement: Publisher<T>): Flux<T> {\n        return super.onErrorReturn(replacement) as Flux<T>;\n    }\n\n    public override onErrorContinue(predicate: (error: Error) => boolean): Flux<T> {\n        return super.onErrorContinue(predicate) as Flux<T>;\n    }\n\n    public override doFirst(fn: () => void): Flux<T> {\n        return super.doFirst(fn) as Flux<T>;\n    }\n\n    public override doOnNext(fn: (value: T) => void): Flux<T> {\n        return super.doOnNext(fn) as Flux<T>;\n    }\n\n    public override doFinally(fn: () => void): Flux<T> {\n        return super.doFinally(fn) as Flux<T>;\n    }\n\n    public override doOnSubscribe(fn: (subscriber: Subscriber<T>) => void): Flux<T> {\n        return super.doOnSubscribe(fn) as Flux<T>;\n    }\n\n    public override publishOn(scheduler: Scheduler): Flux<T> {\n        return super.publishOn(scheduler) as Flux<T>;\n    }\n\n    public override subscribeOn(scheduler: Scheduler): Flux<T> {\n        return super.subscribeOn(scheduler) as Flux<T>;\n    }\n}","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nimport {AbstractPipePublisher} from \"@/publishers/pipe\";\nimport {Publisher} from \"@/publishers\";\nimport {Subscriber, Subscription} from \"@/subscriptions\";\nimport OneSink from \"@/sinks/one\";\nimport {Sink} from \"@/sinks\";\nimport {Scheduler} from \"@/schedulers\";\nimport {combine} from \"@/utils\";\nimport {Flux} from \"@/publishers/flux\";\nimport {lazyPeek, peek} from \"@/utils/peek\";\n\n/**\n * Реактивный Publisher, испускающий максимум одно значение или завершение.\n */\nexport class Mono<T> extends AbstractPipePublisher<T> {\n    protected constructor(publisher: Publisher<T>) {\n        super(publisher)\n    }\n\n    /**\n     * Подписывает подписчика на обёрнутый Publisher.\n     */\n\n    public subscribe({\n                         onNext = (value: T) => {\n                         },\n                         onError = (error: Error) => {\n                         },\n                         onComplete = () => {\n                         }\n                     } = {}): Subscription {\n        return peek(this.publisher.subscribe({onNext, onError, onComplete})).peek(val => val.request(1)).get()\n    }\n\n    public sinkType(): 'one' | 'many' {\n        return 'one';\n    }\n\n\n    // =========================================================================\n    // =                            Статические фабрики                        =\n    // =========================================================================\n\n    public static from<T>(publisher: Publisher<T>): Mono<T> {\n        return Mono.generate(sink =>\n            lazyPeek<Subscription>((self) => publisher.subscribe({\n                onNext(value: T) {\n                    sink.next(value)\n                    self().unsubscribe()\n                },\n                onError(error: Error) {\n                    sink.error(error)\n                    self().unsubscribe()\n                },\n                onComplete() {\n                    sink.complete()\n                    self().unsubscribe()\n                }\n            })).get()\n        )\n    }\n\n    public static generate<T>(generator: ((sink: Sink<T>) => void)): Mono<T> {\n        return new Mono(combine(new OneSink<T>(), generator))\n    }\n\n    /**\n     * Возвращает Mono, испускающий одно значение и завершающийся.\n     *\n     * @example\n     * Mono.just(42).subscribe(...)\n     */\n    public static just<T>(value: T): Mono<T> {\n        return Mono.generate(sink => sink.next(value))\n    }\n\n    /**\n     * Возвращает пустой Mono (только onComplete).\n     *\n     * @example\n     * Mono.empty().subscribe(...)\n     */\n    public static empty<T = never>(): Mono<T> {\n        return Mono.generate(sink => sink.complete())\n    }\n\n    /**\n     * Возвращает Mono, испускающий только ошибку.\n     *\n     * @example\n     * Mono.error(new Error(\"Oops\")).subscribe(...)\n     */\n    public static error<T = never>(error: any): Mono<T> {\n        return Mono.generate(sink => sink.error(error))\n    }\n\n    /**\n     * Возвращает Mono.just(value), если value != null, иначе Mono.empty().\n     *\n     * @example\n     * Mono.justOrEmpty(null) → Mono.empty()\n     */\n    public static justOrEmpty<T>(value: T | null | undefined): Mono<T> {\n        return value == null ? Mono.empty() : Mono.just(value)\n    }\n\n    /**\n     * Преобразует Promise в Mono.\n     *\n     * - resolve → onNext(value), onComplete\n     * - reject → onError(error)\n     *\n     * @example\n     * Mono.fromPromise(fetch(...)).subscribe(...)\n     */\n    public static fromPromise<T>(promise: Promise<T>): Mono<T> {\n        return Mono.generate(sink => promise\n            .then((value) => sink.next(value))\n            .catch((err) => sink.error(err)))\n    }\n\n    /**\n     * Создаёт Mono, который инициализируется лениво при подписке.\n     *\n     * @example\n     * Mono.defer(() => Mono.just(Date.now()))\n     */\n    public static defer<T>(factory: () => Mono<T>): Mono<T> {\n        return Mono.generate(sink => factory().subscribe({\n            onNext(value: T) {\n                sink.next(value)\n            },\n            onError(error: Error) {\n                sink.error(error)\n            },\n            onComplete() {\n                sink.complete()\n            }\n        }))\n    }\n\n    // =========================================================================\n    // =                             INSTANCE-МЕТОДЫ                            =\n    // =========================================================================\n\n    /**\n     * Преобразует Mono<T> в Flux<R> через маппер.\n     */\n    public flatMapMany<R>(mapper: (value: T) => Publisher<R>): Flux<R> {\n        return Flux.generate(sink => {\n            let subscription: Subscription | undefined\n            this.subscribe({\n                onNext: (val) => {\n                    subscription = mapper(val).subscribe({\n                        onNext(value: R) {\n                            sink.next(value)\n                        },\n                        onError(error: Error) {\n                            sink.error(error)\n                        },\n                        onComplete() {\n                            sink.complete()\n                        }\n                    })\n                },\n                onError: (error) => {\n                    sink.error(error)\n                },\n                onComplete: () => {\n                    if(subscription == null) sink.complete()\n                }\n            })\n            return {\n                request(count: number) {\n                    subscription?.request(count)\n                },\n                unsubscribe() {\n                    subscription?.unsubscribe()\n                }\n            } as Subscription\n        })\n    }\n\n    /**\n     * Объединяет два Mono в Mono<[T, R]>.\n     */\n    public zipWith<R>(other: Mono<R>): Mono<[T, R]> {\n        return this.flatMap(left => other.map(right => [left, right]))\n    }\n\n    /**\n     * Комбинирует Mono<T> с результатом fn(value): Mono<R>.\n     */\n    public zipWhen<R>(fn: (value: T) => Mono<R>): Mono<[T, R]> {\n        return this.flatMap((left) => fn(left).map((right) => [left, right]))\n    }\n\n    /**\n     * Проверяет, содержит ли Mono значение.\n     */\n    public hasElement(): Mono<boolean> {\n        return this.onErrorContinue(_error => true)\n            .map(_value => true)\n            .switchIfEmpty(Mono.defer(() => Mono.just(false)))\n    }\n\n    /**\n     * Преобразует Mono<T> в Promise<T | null>.\n     */\n    public toPromise(): Promise<T | null> {\n        return new Promise((resolve, reject) => {\n            let value: T | null = null\n            this.subscribe({\n                onNext: (v) => value = v,\n                onError: reject,\n                onComplete: () => resolve(value)\n            })\n        })\n    }\n\n\n    public override pipe<R>(producer: (onNext: (value: R) => void, onError: (error: Error) => void, onComplete: () => void) => void, onSubscribe?: (subscriber: Subscriber<R>) => void, onRequest?: (request: number) => void, onUnsubscribe?: () => void): Mono<R> {\n        return super.pipe(producer, onSubscribe, onRequest, onUnsubscribe) as Mono<R>;\n    }\n\n    public override map<R>(fn: (value: T) => R): Mono<R> {\n        return super.map(fn) as Mono<R>;\n    }\n\n    public override mapNotNull<R>(fn: (value: T) => (R | null | undefined)): Mono<R> {\n        return super.mapNotNull(fn) as Mono<R>;\n    }\n\n    public override flatMap<R>(fn: (value: T) => Publisher<R>): Mono<R> {\n        return super.flatMap(fn) as Mono<R>;\n    }\n\n    public override filter(predicate: (value: T) => boolean): Mono<T> {\n        return super.filter(predicate) as Mono<T>;\n    }\n\n    public override filterWhen(predicate: (value: T) => Publisher<boolean>): Mono<T> {\n        return super.filterWhen(predicate) as Mono<T>;\n    }\n\n    public override cast<R>(): Mono<R> {\n        return super.cast() as Mono<R>;\n    }\n\n    public override switchIfEmpty(alternative: Publisher<T>): Mono<T> {\n        return super.switchIfEmpty(alternative) as Mono<T>;\n    }\n\n    public override onErrorReturn(replacement: Publisher<T>): Mono<T> {\n        return super.onErrorReturn(replacement) as Mono<T>;\n    }\n\n    public override onErrorContinue(predicate: (error: Error) => boolean): Mono<T> {\n        return super.onErrorContinue(predicate) as Mono<T>;\n    }\n\n    public override doFirst(fn: () => void): Mono<T> {\n        return super.doFirst(fn) as Mono<T>;\n    }\n\n    public override doOnNext(fn: (value: T) => void): Mono<T> {\n        return super.doOnNext(fn) as Mono<T>;\n    }\n\n    public override doFinally(fn: () => void): Mono<T> {\n        return super.doFinally(fn) as Mono<T>;\n    }\n\n    public override doOnSubscribe(fn: (subscriber: Subscriber<T>) => void): Mono<T> {\n        return super.doOnSubscribe(fn) as Mono<T>;\n    }\n\n    public override publishOn(scheduler: Scheduler): Mono<T> {\n        return super.publishOn(scheduler) as Mono<T>;\n    }\n\n    public override subscribeOn(scheduler: Scheduler): Mono<T> {\n        return super.subscribeOn(scheduler) as Mono<T>;\n    }\n}\n","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nimport {encode, decode} from \"js-base64\";\nimport {Serializer} from \"src/serializers\";\n\nexport default {\n    serialize(obj: string): string {\n        return encode(obj as string)\n    },\n    deserialize(obj: string): string {\n        return decode(obj)\n    }\n} as Serializer<string, string>","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\nimport {Serializer} from \"src/serializers\";\nimport Sia from \"@/serializers/sia\";\nimport Base64 from \"@/serializers/base64\";\n\nexport default {\n    serialize(obj: any): string {\n        return Base64.serialize(Sia.serialize(obj).join(','));\n    },\n    deserialize<C>(obj: string): C {\n        return Sia.deserialize(Uint8Array.from(Base64.deserialize(obj).split(',')))\n    }\n} as Serializer<any, string>","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nimport {Serializer} from \"src/serializers\";\n\nexport default new class Rc4 implements Serializer<string, string> {\n    public serialize(data: string, secret: string = 'rc4'): string {\n        let i\n        const s = [];\n        let j = 0;\n        let x;\n        let res = ''\n        for (i = 0; i < 256; i++) {\n            s[i] = i\n        }\n        for (i = 0; i < 256; i++) {\n            j = (j + s[i] + secret.charCodeAt(i % secret.length)) % 256\n            x = s[i]\n            s[i] = s[j]\n            s[j] = x\n        }\n        i = 0\n        j = 0\n        for (let y = 0; y < data.length; y++) {\n            i = (i + 1) % 256\n            j = (j + s[i]) % 256\n            x = s[i]\n            s[i] = s[j]\n            s[j] = x\n            res += String.fromCharCode(data.charCodeAt(y) ^ s[(s[i] + s[j]) % 256])\n        }\n        return res\n    }\n    public deserialize<C extends string>(data: string, secret = 'rc4'): C {\n        return this.serialize(data, secret) as C\n    }\n}()","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nimport Rc4 from \"@/serializers/rc4\";\nimport Stringify from \"@/serializers/stringify\";\nimport Json from \"@/serializers/json\";\n\ntype CacheEntry<V> = {\n    value: V\n    expire: number\n}\n\nexport type StorageType = 'memory' | 'local' | 'session'\nexport type RemoveReason = 'manual' | 'expire' | 'eviction'\nexport type OverflowPolicy = 'overwrite' | 'ignore' | 'error'\n\nexport interface CacheOptions<K, V> {\n    name?: string\n    encode: boolean\n    storage: StorageType\n    maxSize: number,\n    overflowPolicy: OverflowPolicy\n    expireAfterAccess: number,\n    expireAfterWrite: number,\n    onRemove?: (key: K, value: V, reason: RemoveReason) => void\n}\n\nexport class CacheBuilder<K, V> {\n    private _name?: string\n    private _encode = false\n    private _storage: StorageType = 'memory'\n    private _maxSize = -1\n    private _overflowPolicy: OverflowPolicy = 'overwrite'\n    private _expireAfterAccess = -1\n    private _expireAfterWrite = -1\n    private _onRemove?: (key: K, value: V, reason: RemoveReason) => void\n\n\n    public name(value: string) {\n        this._name = value;\n        return this\n    }\n\n    public encode(value: boolean) {\n        this._encode = value;\n        return this\n    }\n\n    public storage(value: StorageType) {\n        this._storage = value;\n        return this\n    }\n\n    public maxSize(value: number) {\n        this._maxSize = value;\n        return this\n    }\n\n    public overflowPolicy(value: OverflowPolicy) {\n        this._overflowPolicy = value;\n        return this\n    }\n\n    public expireAfterAccess(value: number) {\n        this._expireAfterAccess = value;\n        return this\n    }\n\n    public expireAfterWrite(value: number) {\n        this._expireAfterWrite = value;\n        return this\n    }\n\n    public onRemove(value: (key: K, value: V, reason: RemoveReason) => void) {\n        this._onRemove = value;\n        return this\n    }\n\n    private buildOptions() {\n        return {\n            name: this._name,\n            encode: this._encode,\n            storage: this._storage,\n            maxSize: this._maxSize,\n            overflowPolicy: this._overflowPolicy,\n            expireAfterAccess: this._expireAfterAccess,\n            expireAfterWrite: this._expireAfterWrite,\n            onRemove: this._onRemove\n        }\n    }\n\n    public build() {\n        return new Cache<K, V>(this.buildOptions())\n    }\n}\n\nclass Cache<K, V> {\n    private readonly cache = new Map<K, CacheEntry<V>>()\n\n    public constructor(protected readonly options: CacheOptions<K, V>) {\n        this.initialize()\n    }\n\n    private initialize() {\n        const storageType = this.options.storage;\n        if (storageType == 'memory' || window == null) return\n        const name = this.options.name;\n        if (name == null) throw new Error('Stores other than memory require an explicit name')\n        window.addEventListener('beforeunload', this.save)\n        const storage = window[`${storageType}Storage`]\n        const encode = this.options.encode;\n        const stored = storage.getItem(encode ? Rc4.serialize(name, name) : name)\n        if (stored == null) return\n        const decoded: Map<K, CacheEntry<V>> = encode ? Stringify.deserialize(stored) : Json.deserialize(stored)\n        decoded.forEach((value, key) => {\n            if (value.expire == -1 || value.expire > Date.now()) {\n                this.cache.set(key, value)\n            }\n        })\n    }\n\n    public save() {\n        const name = this.options.name;\n        const storageType = this.options.storage;\n        if (storageType == 'memory' || window == null || name == null) return\n        const storage = window[`${storageType}Storage`]\n        const encode = this.options.encode;\n        storage.setItem(encode ? Rc4.serialize(name, name) : name,\n            encode ? Stringify.serialize(this.cache) : Json.serialize(this.cache))\n    }\n\n    public get(key: K, factory: (key: K) => V) {\n        return this.getIfPresent(key) || this.put(key, factory(key))\n    }\n\n    public getIfPresent(key: K) {\n        let stored = this.cache.get(key)\n        if (stored != null && stored.expire > -1 && stored.expire >= Date.now()) {\n            if (this.options.expireAfterAccess > -1) stored.expire = Date.now() + this.options.expireAfterAccess\n            return stored.value\n        }\n        this.invalidate(key, 'expire')\n        return null\n    }\n\n    public put(key: K, value: V) {\n        if (this.options.maxSize > -1 && this.cache.size >= this.options.maxSize) {\n            const overflowPolicy = this.options.overflowPolicy;\n            if (overflowPolicy == \"ignore\") return value\n            if (overflowPolicy == \"error\") throw new Error(\"Cache overflowed!\")\n            if (overflowPolicy == \"overwrite\") this.invalidate(this.cache.keys().next().value, 'eviction')\n        }\n        this.cache.set(key, {\n            value: value,\n            expire: this.options.expireAfterWrite > -1 ? Date.now() + this.options.expireAfterWrite : -1\n        } as CacheEntry<V>)\n        return value\n    }\n\n    public invalidate(key?: K, reason: RemoveReason = \"manual\") {\n        if (key == null || !this.cache.has(key)) return\n        const value = this.cache.get(key)\n        this.cache.delete(key)\n        if (value == null) return;\n        this.options.onRemove?.(key, value.value, reason)\n    }\n\n    public invalidateAll() {\n        const keys = this.cache.keys();\n        let next = keys.next()\n        while (!next.done) {\n            this.invalidate(next.value)\n            next = keys.next()\n        }\n    }\n}\n\nexport default {\n    builder: <K, V>() => new CacheBuilder<K, V>()\n}","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nenum EventPriority {\n    LOWEST,\n    LOW,\n    NORMAL,\n    HIGH,\n    HIGHEST\n}\n\nexport default EventPriority","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nimport ManySink from \"@/sinks/many\";\nimport {Flux} from \"@/publishers/flux\";\nimport EventPriority from \"@/eventbus/priority\";\nimport EventBusEvent, {Event} from \"@/eventbus/event\";\n\ntype EventProcessor = {\n    event: EventBusEvent<object>\n    priority: EventPriority,\n}\n\nexport class EventBusContainer {\n    private sink = new ManySink<EventProcessor>()\n\n    public emit<D extends object>(\n        event: Event<D>,\n        data: D\n    ): EventBusEvent<D> {\n        const instance: EventBusEvent<D> = new event(data)\n        Object.keys(EventPriority)\n            .filter(value => isNaN(value as unknown as number))\n            .forEach(value => {\n                this.sink.next({\n                    event: instance,\n                    priority: value as unknown as EventPriority\n                })\n            })\n        return instance\n    }\n\n    public on<D extends object>(\n        event: Event<D>,\n        callback: (event: EventBusEvent<D>) => void,\n        priority: EventPriority = EventPriority.NORMAL,\n        ignoreCanceled = false\n    ) {\n        const subscription = Flux.from(this.sink)\n            .cast<EventProcessor>()\n            .filter(value => value.event instanceof event)\n            .filter(value => value.priority as unknown as string == EventPriority[priority])\n            .filter(value => ignoreCanceled || !value.event.canceled)\n            .doOnNext(value => callback(value.event as EventBusEvent<D>))\n            .subscribe();\n        subscription.request(Number.MAX_SAFE_INTEGER)\n        return {\n            detach() {\n                subscription.unsubscribe()\n            }\n        }\n    }\n}\n\nexport default new EventBusContainer()\n","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nexport default class EventBusEvent<D extends object> {\n    public canceled = false\n\n    constructor(public data: D) {\n    }\n}\n\nexport type Event<D extends object> = new (data: D) => EventBusEvent<D>","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n\nimport {Publisher} from \"@/publishers\";\nimport {ReplayLatestSink} from \"@/sinks/many/replay/latest\";\nimport {Subscription} from \"@/subscriptions\";\nimport {Flux} from \"@/publishers/flux\";\nimport {peek} from \"@/utils/peek\";\n\n// TODO Возможно стоит сделать рекурсивный Proxy?\nexport class Reactive<T> implements Publisher<T> {\n    private readonly sink: ReplayLatestSink<T>\n    private ref!: T\n\n    public constructor(value: T) {\n        this.sink = new ReplayLatestSink(1)\n        this.next(value)\n    }\n\n    public next(value: T): Reactive<T> {\n        this.ref = value\n        this.sink.next(value)\n        return this\n    }\n\n    public update(fn: (value: T) => T): Reactive<T> {\n        return this.next(fn(this.ref))\n    }\n\n    public get(): T {\n        return this.ref\n    }\n\n    public subscribe({\n                         onNext = (value: T) => {\n                         },\n                         onError = (error: Error) => {\n                         },\n                         onComplete = () => {\n                         }\n                     } = {}): Subscription {\n        return peek(this.asFlux().subscribe({\n            onNext,\n            onError,\n            onComplete\n        })).peek(val => val.request(Number.MAX_SAFE_INTEGER)).get()\n    }\n\n    public asFlux(): Flux<T> {\n        return Flux.from(this.sink)\n            .cast<T>()\n            .distinctUntilChanged()\n    }\n}\n\nexport default function reactive<T>(value: T): Reactive<T> {\n    if (value instanceof Reactive) return value\n    return new Reactive(value)\n}","/*\n *  Copyright (C) 2025 CKATEPTb\n *\n * This file is part of pjsx-boilerplate.\n *\n * pjsx-boilerplate is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * pjsx-boilerplate is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\nimport ManySink from \"@/sinks/many\";\nimport {ReplayAllSink} from \"@/sinks/many/replay/all\";\nimport {ReplayLimitSink} from \"@/sinks/many/replay/limit\";\nimport {ReplayLatestSink} from \"@/sinks/many/replay/latest\";\nimport OneSink from \"@/sinks/one\";\n\nimport {Sink} from \"@/sinks\";\nimport {ImmediateScheduler} from \"@/schedulers/immediate\";\nimport {MicroScheduler} from \"@/schedulers/micro\";\nimport {MacroScheduler} from \"@/schedulers/macro\";\nimport {DelayScheduler} from \"@/schedulers/delay\";\nimport {CancellableScheduler, Scheduler} from \"@/schedulers\";\nimport {Mono} from \"@/publishers/mono\";\nimport {Flux} from \"@/publishers/flux\";\nimport {BackpressurePublisher, Publisher} from \"@/publishers\";\nimport {AbstractPipePublisher, PipePublisher} from \"@/publishers/pipe\";\nimport {Subscriber, Subscription} from \"@/subscriptions\";\nimport Base64 from \"@/serializers/base64\";\nimport Sia from \"@/serializers/sia\";\nimport Stringify from \"@/serializers/stringify\";\nimport Json from \"@/serializers/json\";\nimport Rc4 from \"@/serializers/rc4\";\nimport Cache, {CacheOptions, OverflowPolicy, RemoveReason, StorageType} from \"@/cache\";\nimport EventBus, {EventBusContainer} from \"@/eventbus\";\nimport EventPriority from \"@/eventbus/priority\";\nimport Event from \"@/eventbus/event\"\nimport EventBusEvent from \"@/eventbus/event\"\n\nexport {type Sink, OneSink, ManySink, ReplayAllSink, ReplayLatestSink, ReplayLimitSink}\n\nexport const Sinks = {\n    one: () => new OneSink(),\n    many: () => ({\n        multicast: () => new ManySink(),\n        replay: () => ({\n            all: () => new ReplayAllSink(),\n            latest: (limit: number) => new ReplayLatestSink(limit),\n            limit: (limit: number) => new ReplayLimitSink(limit)\n        })\n    })\n}\n\nexport {type Scheduler, type CancellableScheduler, DelayScheduler, ImmediateScheduler, MacroScheduler, MicroScheduler}\nexport const Schedulers = {\n    immediate: () => new ImmediateScheduler(),\n    micro: () => new MicroScheduler(),\n    macro: () => new MacroScheduler(),\n    delay: (ms: number): DelayScheduler => new DelayScheduler(ms)\n}\n\n\nexport {\n    Mono,\n    Flux,\n    type Publisher,\n    BackpressurePublisher,\n    type PipePublisher,\n    AbstractPipePublisher,\n    type Subscription,\n    type Subscriber\n}\n\nexport {\n    Base64,\n    Json,\n    Rc4,\n    Sia,\n    Stringify\n}\n\nexport * from '@/utils'\n\nexport {\n    Cache,\n    // SyncCache,\n    type CacheOptions,\n    type OverflowPolicy,\n    type RemoveReason,\n    type StorageType\n}\n\nexport {\n    EventBus, EventBusContainer, EventPriority, Event, EventBusEvent\n}\nexport {Reactive, default as reactive} from '@/utils/reactive'\nexport {peek, lazyPeek} from '@/utils/peek'"],"mappings":"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","names":["big_64","ref","encode","EventPriority"]}