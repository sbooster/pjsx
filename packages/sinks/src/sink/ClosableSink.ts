import {Listener} from "@/listener/Listener";
import Sink from "@/sink/Sink";

/**
 * Абстрактный класс для реализации Sink, который поддерживает завершение потока.
 * Этот класс предоставляет общую логику для потоков, которые могут быть завершены (или по ошибке, или нормальным завершением).
 * Классы, которые наследуются от ClosableSink, должны реализовывать логику для эмита значений и ошибок.
 */
export default abstract class ClosableSink<T> implements Sink<T> {
    protected closed: boolean = false;   // Флаг, который указывает, завершена ли работа потока (эмитировано значение или ошибка).

    /**
     * Проверяет, завершен ли поток. Если завершен, выводит сообщение в консоль и возвращает false.
     * Если поток не завершен, возвращает true и позволяет продолжить работу.
     *
     * Это вспомогательный метод, который используется перед эмитом значения или ошибки,
     * чтобы убедиться, что поток не был завершен.
     * @param message Сообщение, которое выводится в ошибку, если поток завершен.
     * @returns {boolean} Возвращает true, если поток не завершен, иначе false.
     */
    protected isNotClosed(message?: string): boolean {
        if (this.closed) {
            if(message != null) throw new Error(message)
            return false;
        }
        return true;
    }

    /**
     * Абстрактный метод для эмита следующего значения в поток.
     * Каждый конкретный Sink должен реализовать эту логику.
     * После первого эмита или ошибки поток будет завершен.
     * @param value Значение, которое нужно эмитировать.
     */
    public abstract emitData(value: T): void;

    /**
     * Абстрактный метод для эмита ошибки в поток.
     * Каждый конкретный Sink должен реализовать эту логику.
     * После эмита ошибки поток будет завершен.
     * @param error Ошибка, которая будет передана слушателю.
     */
    public abstract emitError(error: Error): void;

    /**
     * Абстрактный метод для завершения потока без эмита значения.
     * Каждый конкретный Sink должен реализовать эту логику.
     * Поток завершится, и слушатели получат уведомление о завершении.
     */
    public abstract emitClose(): void;

    /**
     * Абстрактный метод для добавления слушателя.
     * Каждый конкретный Sink должен реализовать логику для добавления слушателей.
     * Слушатели будут получать эмитированные значения или ошибки.
     * @param listener слушатель, который будет слушать поток.
     */
    public abstract addListener(listener: Listener<T>): void;

    /**
     * Абстрактный метод для удаления слушателей.
     * Каждый конкретный Sink должен реализовать логику для удаления слушателей.
     * Этот метод может быть полезен в потоках, где есть несколько слушателей, и нужно поддерживать возможность отписки.
     * @param listener слушатель, который будет удален из потока.
     */
    public abstract removeListener(listener: Listener<T>): void;
}